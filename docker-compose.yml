version: "3.9"
services:
  auth-service:
    env_file:
      - ./.env.local
    build:
      context: apps/be/auth-service
      dockerfile: Dockerfile
    volumes:
      - ./apps/be/auth-service/src/:/app/src
      - ./apps/be/auth-service/package.json/:/app/package.json
      - /app/node_modules
    ports:
      - "3001:3001"
    environment:
      PORT: 3001
      PREFIX: auth
      NODE_ENV: development
      MONGO_CONNECTION_URI: "${MONGO_CONNECTION_URI}/auth"
      TWO_FA_TOKEN_EXIPRY: 7d
      INITIAL_TOKEN_EXPIRY: 1h
      EMAIL_VERIFICATION_LINK_EXPIRY: 1d
      KAFKA_URI: kafka:9092
    depends_on:
      - mongo
      - redis-graphql
      - zoo
      - kafka
    networks:
      - app-network

  post-service:
    env_file:
      - ./.env.local
    build:
      context: apps/be/post-service
      dockerfile: Dockerfile
    volumes:
      - ./apps/be/post-service/src/:/app/src
      - ./apps/be/post-service/package.json/:/app/package.json
      - /app/node_modules
    ports:
      - "3009:3009"
    environment:
      PORT: 3009
      PREFIX: post
      NODE_ENV: development
      MONGO_CONNECTION_URI: "${MONGO_CONNECTION_URI}/post"
      TWO_FA_TOKEN_EXIPRY: 7d
      INITIAL_TOKEN_EXPIRY: 1h
      EMAIL_VERIFICATION_LINK_EXPIRY: 1d
      KAFKA_URI: kafka:9092
    depends_on:
      - zoo
      - kafka
      - mongo
      - redis-graphql
    networks:
      - app-network

  front-web-service:
    env_file:
      - ./.env.local
    build:
      context: apps/be/front-web-service
      dockerfile: Dockerfile
    volumes:
      - ./apps/be/front-web-service/src/:/app/src
      - ./apps/be/front-web-service/package.json/:/app/package.json
      - /app/node_modules
    ports:
      - "3011:3011"
    environment:
      PORT: 3011
      PREFIX: front-web
      NODE_ENV: development
      MONGO_CONNECTION_URI: "${MONGO_CONNECTION_URI}/front-web"
      TWO_FA_TOKEN_EXIPRY: 7d
      INITIAL_TOKEN_EXPIRY: 1h
      EMAIL_VERIFICATION_LINK_EXPIRY: 1d
      KAFKA_URI: kafka:9092
    depends_on:
      - mongo
    networks:
      - app-network

  email-service:
    env_file:
      - ./.env.local
    build:
      context: apps/be/email-service
      dockerfile: Dockerfile
    volumes:
      - ./apps/be/email-service/src/:/app/src
      - ./apps/be/email-service/package.json/:/app/package.json
      - /app/node_modules
    ports:
      - "3002:3002"
    environment:
      PORT: 3002
      PREFIX: email
      NODE_ENV: development
      MONGO_CONNECTION_URI: "${MONGO_CONNECTION_URI}/email"
      KAFKA_URI: kafka:9092
    depends_on:
      - mongo
      - zoo
      - kafka
    networks:
      - app-network

  file-service:
    env_file:
      - ./.env.local
    build:
      context: apps/be/file-service
      dockerfile: Dockerfile
    volumes:
      - ./apps/be/file-service/src/:/app/src
      - /app/node_modules
      - ./apps/be/file-service/public:/app/public
    ports:
      - "3003:3003"
    environment:
      PORT: 3003
      PREFIX: file
      NODE_ENV: development
      MONGO_CONNECTION_URI: "${MONGO_CONNECTION_URI}/file"
      JWT_SECRET: secret
      SALT_TO_ROUNDS: ${SALT_TO_ROUNDS}
      FILE_URL: http://localhost:3003/file/images
      AWS_SECRET_ACCESS_KEY: HHeaB73J1sfsRduHmGN3JhQ8AQd5njUvReHY9WFGPp4
      AWS_ACCESS_KEY_ID: 452O44CXAKLTJN3BY4NH
      #AWS_DEFAULT_REGION :
      AWS_BUCKET: enochstaging
      DO_SPACES_ENDPOINT: ams3.digitaloceanspaces.com
      KAFKA_URI: kafka:9092
    depends_on:
      - mongo
      - zoo
      - kafka
    networks:
      - app-network

  sms-service:
    env_file:
      - ./.env.local
    build:
      context: apps/be/sms-service
      dockerfile: Dockerfile
    volumes:
      - ./apps/be/sms-service/package.json/:/app/package.json
      - ./apps/be/sms-service/src/:/app/src
      - /app/node_modules
    ports:
      - "3004:3004"
    environment:
      PORT: 3004
      PREFIX: sms
      NODE_ENV: development
      MONGO_CONNECTION_URI: "${MONGO_CONNECTION_URI}/sms"
      KAFKA_URI: kafka:9092
    depends_on:
      - zoo
      - kafka
      - mongo
    networks:
      - app-network
       
  web3-service:
    env_file:
      - ./.env.local
    build:
      context: apps/be/web3-service
      dockerfile: Dockerfile
    volumes:
      - ./apps/be/web3-service/src/:/app/src
      - ./apps/be/web3-service/package.json/:/app/package.json
      - /app/node_modules
    ports:
      - "3005:3005"
    environment:
      PORT: 3005
      PREFIX: web3
      NODE_ENV: development
      MONGO_CONNECTION_URI: "${MONGO_CONNECTION_URI}/web3"

    depends_on:
      - mongo
    networks:
      - app-network

  shop-service:
    env_file:
      - ./.env.local
    build:
      context: apps/be/shop-service
      dockerfile: Dockerfile
    volumes:
      - ./apps/be/shop-service/src/:/app/src
      - ./apps/be/shop-service/package.json/:/app/package.json
      - /app/node_modules
    ports:
      - "3006:3006"
    environment:
      PORT: 3006
      PREFIX: shop
      NODE_ENV: development
      MONGO_CONNECTION_URI: "${MONGO_CONNECTION_URI}/shop"

    depends_on:
      - mongo
    networks:
      - app-network

  media-service:
    env_file:
      - ./.env.local
    build:
      context: apps/be/media-service
      dockerfile: Dockerfile
    volumes:
      - ./apps/be/media-service/src/:/app/src
      - ./apps/be/media-service/package.json/:/app/package.json
      - /app/node_modules
    ports:
      - "3007:3007"
    environment:
      PORT: 3007
      PREFIX: media
      NODE_ENV: development
      MONGO_CONNECTION_URI: "${MONGO_CONNECTION_URI}/media"
      KAFKA_URI: kafka:9092
    depends_on:
      - zoo
      - kafka
      - mongo
    networks:
      - app-network
      
  backoffice-service:
    env_file:
      - ./.env.local
    build:
      context: apps/be/backoffice-service
      dockerfile: Dockerfile
    volumes:
      - ./apps/be/backoffice-service/src/:/app/src
      - ./apps/be/backoffice-service/package.json/:/app/package.json
      - /app/node_modules
    ports:
      - "3006:3006"
    environment:
      PORT: 3006
      PREFIX: backoffice
      NODE_ENV: development
      MONGO_CONNECTION_URI: "${MONGO_CONNECTION_URI}/backoffice"

    depends_on:
      - mongo
    networks:
      - app-network

    

  enoch:
    env_file:
      - ./.env.local
    build:
      context: apps/fe/enoch
      dockerfile: Dockerfile
    volumes:
      - ./apps/fe/enoch/:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      - auth-service
      - post-service

    environment:
      PORT: 3000
      NODE_ENV: development
      NATS_CONNECTION_URL: nats://nats-dev:4222
      JWT_SECRET: secret
    networks:
      - app-network

  redis-graphql:
    image: redis:latest
    ports:
      - "6379:6379"
    networks:
      - app-network
    volumes:
      - ./data/redis:/data

  mongo:
    image: mongo
    #environment:
    #MONGO_INITDB_ROOT_USERNAME: root
    #MONGO_INITDB_ROOT_PASSWORD: password
    networks:
      - app-network
    volumes:
      - ./data/db:/data/db
    ports:
      - 27017:27017

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: password
      ME_CONFIG_MONGODB_URL: mongodb://mongo:27017
    networks:
      - app-network

  zoo:
    image: confluentinc/cp-zookeeper:7.2.1
    hostname: zoo
    container_name: zoo
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo:2888:3888
    networks:
      - app-network  

  kafka:
    image: confluentinc/cp-kafka:7.2.1
    hostname: kafka
    container_name: kafka
    ports:
      - "29092:29092" 
    environment:
      KAFKA_LISTENERS: EXTERNAL_SAME_HOST://:29092,INTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL_SAME_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL_SAME_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
      KAFKAJS_NO_PARTITIONER_WARNING: 1 
    depends_on:
      - zoo
    networks:
      - app-network  
 
  nginx:
    image: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/config/nginx.conf:/etc/nginx/conf.d/node.template
      - ./nginx/html:/etc/nginx//html
    command: 'bash -c "cat /etc/nginx/conf.d/node.template > /etc/nginx/conf.d/default.conf && nginx -g ''daemon off;''"'
    depends_on:
      - auth-service
      - post-service
      - front-web-service
      - email-service
      - file-service
      - enoch
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
