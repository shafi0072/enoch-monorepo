var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.697,1,1.906]],["body/controllers/AppController.html",[0,1.931,1,2.169,2,1.186,3,0.337,4,0.294,5,0.37,6,1.962,7,0.253,8,1.282,9,3.472,10,3.724,11,4.512,12,2.041,13,3.472,14,4.512,15,2.866,16,3.472,17,2.668,18,3.386,19,1.459,20,0.038,21,2.377,22,4.102,23,0.906,24,2.377,25,1.671,26,1.375,27,0.492,28,1.023,29,2.866,30,1.851,31,1.322,32,2.377,33,3.472,34,2.377,35,2.377,36,3.472,37,2.377,38,3.724,39,1.186,40,2.377,41,3.472,42,4.102,43,3.472,44,2.377,45,0.639,46,1.689,47,1.186,48,0.878,49,4.102,50,1.485,51,2.866,52,1.962,53,2.866,54,1.485,55,2.047,56,1.962,57,0.337,58,0.064,59,1.07,60,2.047,61,0.797,62,1.962,63,1.322,64,1.689,65,1.962,66,1.772,67,2.377,68,2.377,69,1.056,70,2.377,71,3.472,72,2.377,73,1.962,74,3.472,75,2.377,76,2.377,77,2.377,78,2.377,79,2.377,80,2.377,81,2.377,82,2.377,83,1.689,84,1.322,85,2.377,86,0.021,87,0.021]],["title/modules/AppModule.html",[88,2.168,89,1.906]],["body/modules/AppModule.html",[1,2.305,2,2.22,3,0.282,4,0.246,5,0.212,12,1.683,18,1.643,20,0.039,26,1.019,45,0.811,46,2.935,48,0.735,50,1.243,54,1.243,55,2.341,56,1.643,57,0.282,58,0.054,63,1.691,64,2.161,69,0.605,86,0.019,87,0.019,88,2.161,89,3.468,90,1.414,91,1.9,92,1.643,93,1.643,94,1.859,95,2.609,96,1.683,97,1.683,98,2.51,99,1.643,100,1.414,101,1.414,102,3.041,103,1.107,104,3.041,105,1.991,106,1.643,107,2.51,108,1.643,109,1.991,110,1.243,111,1.107,112,4.45,113,3.055,114,0.993,115,1.991,116,0.735,117,1.991,118,1.991,119,3.041,120,1.991,121,0.993,122,1.643,123,1.9,124,1.991,125,1.414,126,1.991,127,2.161,128,1.991,129,2.161,130,1.991,131,1.991,132,1.643,133,1.414,134,1.991,135,2.161,136,3.046,137,1.9,138,4.45,139,1.991,140,1.991,141,2.51,142,4.131,143,1.991,144,1.991,145,1.991,146,1.991,147,1.991,148,1.991,149,1.991,150,1.643,151,1.991,152,1.991,153,1.991,154,1.991,155,1.991,156,1.991,157,1.991,158,1.991,159,1.991,160,1.991,161,1.991,162,1.991,163,1.991,164,1.991,165,1.243,166,1.991,167,1.991,168,1.991,169,1.991,170,1.991,171,1.991,172,1.991,173,1.991,174,2.305,175,1.991,176,1.991,177,1.991,178,1.991,179,1.991,180,1.414,181,1.991]],["title/injectables/AppService.html",[55,1.523,182,0.928]],["body/injectables/AppService.html",[3,0.582,4,0.508,5,0.438,7,0.438,8,1.853,10,4.656,20,0.037,23,0.743,30,1.518,31,1.383,45,0.582,48,1.518,55,2.504,57,0.582,58,0.111,66,1.518,86,0.031,87,0.031,182,1.526,183,2.051,184,3.394,185,4.111,186,4.111,187,4.111]],["title/classes/Author.html",[58,0.082,188,1.523]],["body/classes/Author.html",[3,0.466,4,0.407,5,0.351,7,0.351,17,2.423,19,1.58,20,0.038,23,0.939,27,0.736,28,1.295,31,1.432,45,0.617,47,2.593,57,0.466,58,0.089,86,0.027,87,0.027,116,1.216,174,3.246,188,2.174,189,1.001,190,2.718,191,1.46,192,4.031,193,2.437,194,4.883,195,4.031,196,4.357,197,3.292,198,3.096,199,3.292,200,3.292,201,3.292,202,3.006,203,2.174,204,2.423,205,3.292,206,3.596]],["title/classes/AuthorsResolver.html",[58,0.082,207,1.906]],["body/classes/AuthorsResolver.html",[3,0.423,4,0.369,5,0.318,7,0.318,8,1.507,12,2.199,17,2.584,19,1.24,20,0.038,23,0.737,25,1.662,26,1.367,27,0.658,28,1.017,30,1.507,39,1.49,45,0.578,57,0.423,58,0.08,66,1.507,69,0.908,86,0.025,87,0.025,116,1.102,188,2.907,189,0.908,192,2.464,193,2.694,195,3.836,203,2.035,207,2.548,208,2.464,209,2.985,210,2.985,211,2.985,212,2.898,213,2.985,214,4.647,215,2.985,216,2.464,217,2.985,218,3.367,219,3.367,220,2.985,221,2.985,222,2.985,223,2.985,224,2.985,225,3.367,226,2.985,227,2.985,228,2.985]],["title/injectables/ImageUploadService.html",[94,1.373,182,0.928]],["body/injectables/ImageUploadService.html",[3,0.306,4,0.267,5,0.491,7,0.23,8,1.195,12,2.044,20,0.038,23,0.778,25,1.579,26,1.3,27,0.458,28,0.967,30,1.195,39,1.614,45,0.653,48,0.798,57,0.306,58,0.058,59,1.456,60,1.614,61,1.084,66,1.703,69,1.402,83,2.298,84,1.799,86,0.02,87,0.02,94,1.456,96,2.044,110,1.349,111,2.988,180,2.298,182,0.983,183,1.078,191,1.084,229,1.534,230,2.88,231,2.67,232,2.67,233,2.16,234,2.16,235,2.16,236,3.996,237,2.16,238,2.755,239,2.67,240,2.16,241,1.349,242,1.783,243,1.783,244,3.554,245,2.67,246,2.755,247,3.234,248,2.298,249,3.234,250,2.298,251,2.298,252,2.298,253,3.234,254,2.67,255,3.554,256,2.298,257,3.201,258,3.234,259,2.67,260,3.234,261,2.16,262,1.783,263,1.783,264,1.783,265,2.67,266,2.16,267,2.16,268,2.16,269,2.16,270,1.349,271,2.16,272,3.276,273,2.16,274,2.67,275,2.16,276,2.298,277,1.783,278,1.534,279,2.16,280,1.534,281,2.16,282,1.783,283,2.16,284,1.201,285,2.16,286,2.16,287,1.534,288,1.783,289,1.349,290,2.16]],["title/classes/JwtAuthGuard.html",[58,0.082,291,1.906]],["body/classes/JwtAuthGuard.html",[3,0.626,4,0.547,5,0.471,20,0.036,45,0.626,57,0.626,58,0.119,86,0.032,87,0.032,189,1.345,291,3.275,292,3.142,293,3.651,294,4.423,295,3.142,296,3.651,297,4.423]],["title/injectables/JwtStrategy.html",[95,1.697,182,0.928]],["body/injectables/JwtStrategy.html",[3,0.45,4,0.393,5,0.338,7,0.338,8,1.571,20,0.038,23,0.769,25,1.733,26,1.426,27,0.725,28,1.06,30,1.173,31,1.412,45,0.756,48,1.173,50,1.984,57,0.45,58,0.085,59,1.915,60,1.585,61,1.064,66,1.173,86,0.026,87,0.026,95,2.366,113,3.057,114,1.585,150,2.622,182,1.293,183,1.585,295,2.257,296,2.622,298,2.622,299,4.254,300,3.176,301,3.176,302,4.254,303,4.254,304,3.176,305,4.254,306,4.254,307,4.254,308,3.176,309,3.176,310,3.176,311,3.176,312,2.622,313,2.622,314,3.176,315,3.176,316,3.176,317,3.176,318,3.176,319,3.176,320,3.176]],["title/classes/Post.html",[47,1.523,58,0.082]],["body/classes/Post.html",[3,0.503,4,0.439,5,0.378,7,0.378,17,2.976,19,1.54,20,0.038,23,0.915,27,0.717,28,1.141,31,1.262,45,0.503,47,2.284,57,0.503,58,0.096,86,0.028,87,0.028,116,1.312,174,2.86,189,1.08,191,1.534,193,2.528,198,3.253,202,3.08,203,2.528,204,2.546,206,3.779,225,4.182,321,2.932,322,5.066,323,3.552,324,3.552,325,3.552]],["title/injectables/PostMediaService.html",[96,1.243,182,0.928]],["body/injectables/PostMediaService.html",[3,0.357,4,0.312,5,0.452,7,0.269,8,1.339,12,2.237,20,0.038,23,0.838,25,1.889,26,1.554,27,0.657,28,1.156,30,1.567,31,1.409,39,2.117,45,0.696,48,0.931,57,0.357,58,0.068,59,1.631,60,1.809,61,0.845,66,1.713,69,0.767,84,2.015,86,0.022,87,0.022,96,1.476,100,1.792,113,2.93,114,1.258,121,1.258,165,2.65,174,1.575,182,1.102,183,1.258,232,2.992,239,2.992,241,1.575,270,1.575,276,1.792,287,2.575,289,1.575,326,2.082,327,3.624,328,3.624,329,2.522,330,3.829,331,2.522,332,3.624,333,2.65,334,2.522,335,3.624,336,2.897,337,2.522,338,3.624,339,3.295,340,2.522,341,2.082,342,1.402,343,1.792,344,1.135,345,2.522,346,2.522,347,2.522,348,2.522,349,2.522,350,2.082,351,2.522,352,2.522,353,2.522,354,2.522,355,2.522,356,2.522,357,2.522,358,2.082]],["title/classes/PostMedias.html",[58,0.082,336,1.906]],["body/classes/PostMedias.html",[3,0.307,4,0.268,5,0.231,7,0.231,17,1.804,19,1.528,20,0.038,23,0.908,27,0.812,28,1.341,31,1.665,45,0.551,57,0.551,58,0.058,69,0.659,86,0.02,87,0.02,121,1.082,123,1.355,189,0.659,191,1.087,248,1.541,250,1.541,252,1.541,278,2.762,280,2.762,282,3.209,284,2.162,333,3.028,336,2.428,339,2.762,342,2.162,343,1.541,344,2.326,359,1.355,360,1.75,361,3.209,362,4.315,363,4.002,364,3.282,365,2.169,366,4.361,367,2.169,368,2.169,369,2.169,370,2.169,371,2.169,372,2.169,373,2.306,374,1.79,375,2.679,376,2.169,377,2.169,378,2.169,379,2.169,380,2.169,381,3.245,382,3.245,383,2.169,384,3.245,385,2.679,386,3.245,387,3.245,388,1.79,389,1.541,390,2.679,391,2.169,392,2.169,393,3.245,394,2.169,395,2.169,396,1.79,397,2.169,398,1.541,399,1.79]],["title/classes/S3Uploads.html",[58,0.082,400,1.906]],["body/classes/S3Uploads.html",[3,0.505,4,0.441,5,0.38,7,0.38,19,1.395,20,0.038,23,0.829,27,0.759,31,1.398,45,0.65,57,0.719,58,0.096,69,1.084,86,0.028,87,0.028,121,1.779,189,1.084,191,1.538,284,2.822,333,2.866,342,1.982,344,2.284,360,2.284,363,2.942,364,2.533,366,4.423,373,3.26,374,2.942,375,3.788,400,3.17,401,2.226,402,3.564,403,3.564,404,2.533,405,2.533,406,2.942]],["title/coverage.html",[407,2.942]],["body/coverage.html",[0,2.012,1,1.571,2,1.255,5,0.268,6,2.077,20,0.038,27,0.356,47,1.255,55,1.255,58,0.15,86,0.022,87,0.022,94,1.132,95,1.399,96,1.025,97,1.025,101,1.787,103,1.399,125,1.787,127,1.787,129,1.787,135,1.787,165,1.571,182,1.492,184,2.077,188,1.255,190,2.077,207,1.571,208,2.077,229,2.57,246,1.787,291,1.571,292,1.787,293,2.077,298,2.077,321,2.077,326,2.077,336,1.571,344,2.085,359,2.26,398,1.787,400,1.571,401,2.26,405,1.787,407,1.787,408,2.516,409,2.516,410,2.516,411,6.11,412,3.618,413,5.639,414,5.749,415,3.618,416,2.077,417,2.077,418,2.077,419,2.986,420,2.077,421,1.787,422,2.077,423,2.077,424,5.111,425,2.516,426,2.646,427,1.399,428,1.399,429,1.399,430,4.633,431,2.516,432,2.077,433,2.077,434,1.571,435,2.077,436,2.516,437,2.077,438,2.077,439,2.077,440,2.516,441,2.516]],["title/classes/createS3Dto.html",[58,0.082,427,1.697]],["body/classes/createS3Dto.html",[3,0.489,4,0.427,5,0.479,7,0.368,19,1.05,20,0.038,23,0.812,27,0.637,28,1.12,31,1.579,45,0.637,57,0.708,58,0.143,61,1.675,86,0.028,87,0.028,116,1.275,189,1.05,191,1.506,193,2.494,202,2.944,203,1.723,204,2.5,360,1.554,426,2.157,427,2.5,428,1.92,429,1.92,442,2.779,443,3.122,444,3.453,445,3.453,446,3.453,447,3.194,448,3.194,449,3.194,450,2.157]],["title/dependencies.html",[91,2.288,451,2.113]],["body/dependencies.html",[20,0.038,48,1.204,50,2.036,54,2.036,58,0.088,63,1.813,86,0.027,87,0.027,91,2.036,106,2.691,107,2.691,108,2.691,110,2.036,111,2.407,114,1.627,116,1.204,121,1.627,132,2.691,133,2.316,137,2.704,141,2.691,230,2.036,244,3.573,295,2.316,312,4.011,313,2.691,342,1.813,396,2.691,450,2.036,452,4.328,453,5.177,454,3.26,455,3.26,456,3.26,457,3.26,458,3.26,459,2.691,460,3.573,461,3.26,462,3.26,463,4.328,464,3.26,465,3.26,466,3.26,467,3.26,468,3.26,469,3.26,470,3.26,471,3.26,472,3.26,473,3.26,474,3.26,475,3.26,476,3.26,477,3.26,478,3.26,479,3.26,480,3.26,481,3.26,482,3.26,483,3.26,484,3.26]],["title/miscellaneous/functions.html",[485,1.277,486,3.024]],["body/miscellaneous/functions.html",[7,0.493,20,0.033,86,0.033,87,0.033,435,3.821,437,4.702,485,2.31,486,3.821,487,4.629]],["title/index.html",[7,0.273,488,2.56,489,2.56]],["body/index.html",[4,0.411,20,0.037,63,1.849,86,0.027,87,0.027,122,2.745,188,1.659,251,2.363,407,2.363,442,1.849,490,3.325,491,3.325,492,4.386,493,3.325,494,3.325,495,3.325,496,3.325,497,3.325,498,4.907,499,3.325,500,3.325,501,3.325,502,3.325,503,5.679,504,3.325,505,3.325,506,3.325,507,5.57,508,3.325,509,3.325,510,4.386,511,3.325,512,3.325,513,3.325,514,3.325,515,4.386,516,4.386,517,3.325,518,3.325,519,3.325,520,4.386,521,4.386,522,3.325,523,3.325,524,3.325,525,3.325,526,3.325,527,2.745,528,3.325,529,3.325,530,3.325,531,3.325,532,3.325,533,3.325,534,3.325,535,3.325,536,3.325,537,3.325,538,3.325,539,3.325,540,3.325,541,3.325,542,2.745]],["title/modules.html",[90,2.942]],["body/modules.html",[20,0.033,86,0.033,87,0.033,89,2.919,90,3.32,527,3.857,543,4.673,544,4.673,545,4.673]],["title/overview.html",[546,3.418]],["body/overview.html",[2,1.939,20,0.036,55,2.636,83,2.761,86,0.03,87,0.03,88,2.761,89,3.813,91,3.027,92,3.207,93,3.207,94,2.377,95,2.937,96,2.151,97,2.151,98,4.001,99,3.207,100,2.761,183,1.939,189,1.181,546,3.207,547,3.886,548,3.886,549,3.207]],["title/properties.html",[191,1.228,451,2.113]],["body/properties.html",[20,0.037,86,0.033,87,0.033,188,2.268,191,1.523,442,2.527,542,3.751,550,4.544,551,4.544,552,4.544,553,4.544]],["title/controllers/s3UploadController.html",[0,1.697,103,1.697]],["body/controllers/s3UploadController.html",[0,0.914,2,0.82,3,0.233,4,0.203,5,0.531,7,0.175,8,0.967,12,2.196,15,2.695,19,1.317,20,0.038,23,0.783,25,1.765,26,1.452,27,0.576,28,1.08,30,1.6,39,1.858,45,0.689,46,1.168,47,0.82,48,0.607,51,2.162,52,1.357,53,1.357,54,1.027,57,0.233,58,0.044,59,0.74,60,2.029,61,1.248,62,1.357,63,0.914,64,1.168,65,1.357,66,1.6,69,1.317,73,2.162,84,2.409,86,0.016,87,0.016,94,1.47,96,1.33,97,1.33,103,1.457,113,1.816,114,0.82,123,1.636,133,2.646,212,1.861,230,2.839,236,2.162,238,2.646,241,2.54,256,2.32,270,1.027,272,1.168,274,2.695,276,1.861,277,2.162,278,1.861,280,1.861,284,0.914,287,2.32,288,2.162,289,1.027,291,1.027,292,1.168,333,2.706,339,1.861,358,1.357,360,0.74,361,2.162,364,1.861,421,2.32,422,1.357,443,1.027,459,1.357,460,1.357,549,1.357,554,1.644,555,2.695,556,3.265,557,3.265,558,2.619,559,1.644,560,4.333,561,3.265,562,3.357,563,1.644,564,1.644,565,1.644,566,2.619,567,2.619,568,2.619,569,1.644,570,1.644,571,2.619,572,1.644,573,1.644,574,2.619,575,1.644,576,1.644,577,1.644,578,2.619,579,1.644,580,1.644,581,1.644,582,2.619,583,1.644,584,2.619,585,1.644,586,1.644,587,1.644,588,1.644,589,1.644,590,1.644,591,1.644,592,1.644,593,1.644,594,1.644,595,1.644,596,2.619,597,3.074,598,1.644,599,3.265,600,2.619,601,2.619,602,1.644,603,2.619,604,3.265,605,2.619,606,2.619,607,1.644,608,1.644,609,1.644,610,1.644,611,1.644,612,1.644,613,1.644,614,1.644]],["title/classes/s3UploadInput.html",[58,0.082,428,1.697]],["body/classes/s3UploadInput.html",[3,0.501,4,0.437,5,0.569,7,0.377,19,1.076,20,0.038,23,0.639,27,0.501,31,1.561,45,0.647,57,0.716,58,0.144,61,1.854,86,0.028,87,0.028,116,1.307,189,1.076,191,1.531,193,2.524,202,3.076,203,1.766,204,2.54,360,1.593,426,2.211,427,1.968,428,2.54,429,1.968,442,1.968,443,2.211,447,3.245,448,3.245,449,3.245,450,2.211,615,3.539]],["title/classes/s3UploadResolver.html",[58,0.082,434,1.906]],["body/classes/s3UploadResolver.html",[3,0.465,4,0.406,5,0.519,7,0.35,8,1.606,12,1.986,19,0.998,20,0.038,23,0.786,25,1.771,26,1.457,27,0.69,28,1.084,30,1.212,31,0.904,39,1.637,45,0.69,57,0.465,58,0.088,59,1.477,61,1.1,66,1.212,69,0.998,86,0.027,87,0.027,97,2.26,116,1.212,137,2.05,189,0.998,216,2.709,218,2.709,219,3.589,230,2.05,231,4.284,433,2.709,434,2.715,597,3.589,616,4.875,617,3.281,618,3.281,619,3.281,620,3.281,621,3.281,622,4.347,623,4.347,624,3.281,625,3.281,626,3.281,627,3.281]],["title/injectables/s3UploadService.html",[97,1.243,182,0.928]],["body/injectables/s3UploadService.html",[3,0.211,4,0.184,5,0.258,7,0.159,8,0.894,12,1.969,20,0.039,23,0.636,25,1.433,26,1.179,27,0.211,28,0.877,29,2.905,30,1.129,38,2.523,45,0.666,48,0.551,57,0.211,58,0.04,59,1.09,60,1.525,61,0.811,66,1.681,69,1.667,84,2.531,86,0.015,87,0.015,97,0.986,110,0.931,111,2.531,113,2.429,114,0.744,121,0.744,123,0.931,165,2.938,180,1.059,182,0.736,183,0.744,212,2.945,241,0.931,248,2.172,250,1.059,251,1.059,252,2.172,255,3.422,256,2.172,257,2.905,263,1.231,264,1.231,265,1.999,270,2.59,272,2.945,284,0.829,289,2.59,330,2.905,341,1.231,342,0.829,344,0.671,350,3.422,360,1.584,385,3.195,389,1.72,400,0.931,404,1.059,439,1.231,562,2.905,628,2.421,629,2.421,630,2.421,631,1.491,632,1.491,633,2.421,634,2.421,635,1.491,636,2.421,637,1.491,638,4.146,639,2.421,640,1.491,641,1.491,642,1.491,643,1.491,644,1.491,645,1.491,646,1.491,647,4.704,648,2.421,649,2.421,650,1.491,651,1.491,652,1.491,653,3.519,654,2.421,655,3.057,656,3.057,657,3.057,658,3.057,659,3.057,660,3.057,661,3.057,662,2.421,663,3.057,664,3.519,665,3.057,666,3.057,667,3.519,668,2.421,669,1.491,670,1.491,671,1.491,672,1.491,673,1.491,674,1.491,675,1.491,676,1.491,677,3.057,678,1.491]],["title/classes/s3UploadType.html",[58,0.082,429,1.697]],["body/classes/s3UploadType.html",[3,0.477,4,0.417,5,0.471,7,0.359,19,1.345,20,0.038,23,0.8,27,0.627,28,1.103,31,1.57,45,0.627,57,0.7,58,0.141,61,1.91,86,0.027,87,0.027,116,1.245,189,1.025,191,1.483,193,2.718,198,2.395,202,3.029,203,1.682,204,2.461,360,2.223,426,2.105,427,1.874,428,1.874,429,2.461,442,1.874,443,2.105,447,3.144,448,3.144,449,3.144,450,2.105,679,3.371,680,3.371]],["title/miscellaneous/typealiases.html",[485,1.277,681,3.664]],["body/miscellaneous/typealiases.html",[7,0.48,20,0.033,27,0.638,86,0.033,87,0.033,343,3.765,344,2.385,359,2.813,401,2.813,404,3.765,485,2.247,682,4.503,683,3.717,684,3.717]],["title/miscellaneous/variables.html",[485,1.277,685,3.024]],["body/miscellaneous/variables.html",[2,1.767,5,0.487,7,0.26,20,0.039,26,1.531,27,0.716,69,0.742,86,0.022,87,0.022,94,1.099,96,0.994,97,0.994,101,1.735,103,1.358,111,1.358,125,2.515,127,2.515,129,2.515,135,2.515,136,2.922,137,2.211,207,1.525,229,1.735,238,2.515,242,4.626,243,4.626,245,2.015,246,2.515,254,2.922,259,2.922,262,2.015,344,1.593,359,1.525,373,2.515,388,2.015,389,1.735,390,2.015,398,2.959,399,2.015,401,1.525,405,2.959,406,2.015,416,2.015,417,2.922,418,2.015,419,2.015,420,2.922,421,2.515,423,2.015,432,2.015,434,1.525,438,2.015,485,1.218,555,2.015,683,2.015,684,2.015,685,2.015,686,4.569,687,2.441,688,3.54,689,2.441,690,2.441,691,3.54,692,2.441,693,2.441,694,2.441,695,3.54,696,2.441,697,2.441,698,2.441,699,3.54,700,2.441,701,2.441,702,2.441,703,2.441,704,2.441,705,2.441,706,2.441,707,2.441,708,2.441,709,2.441,710,2.441,711,2.441,712,2.441,713,2.441,714,2.441,715,2.441,716,2.441,717,2.441,718,2.441]]],"invertedIndex":[["",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Author.html":{},"classes/AuthorsResolver.html":{},"injectables/ImageUploadService.html":{},"classes/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/Post.html":{},"injectables/PostMediaService.html":{},"classes/PostMedias.html":{},"classes/S3Uploads.html":{},"coverage.html":{},"classes/createS3Dto.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"controllers/s3UploadController.html":{},"classes/s3UploadInput.html":{},"classes/s3UploadResolver.html":{},"injectables/s3UploadService.html":{},"classes/s3UploadType.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":411,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":551,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":480,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":468,"title":{},"body":{"dependencies.html":{}}}],["0.5.2",{"_index":476,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":414,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":415,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":424,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":431,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":430,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":412,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":425,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":547,"title":{},"body":{"overview.html":{}}}],["1.0.0",{"_index":478,"title":{},"body":{"dependencies.html":{}}}],["1.0.1",{"_index":475,"title":{},"body":{"dependencies.html":{}}}],["1.0.34",{"_index":464,"title":{},"body":{"dependencies.html":{}}}],["1.2.0",{"_index":454,"title":{},"body":{"dependencies.html":{}}}],["1.4.4",{"_index":472,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":83,"title":{},"body":{"controllers/AppController.html":{},"injectables/ImageUploadService.html":{},"overview.html":{}}}],["10.0.6",{"_index":452,"title":{},"body":{"dependencies.html":{}}}],["13.0.0",{"_index":470,"title":{},"body":{"dependencies.html":{}}}],["16.3.0",{"_index":469,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":548,"title":{},"body":{"overview.html":{}}}],["2.10.0",{"_index":473,"title":{},"body":{"dependencies.html":{}}}],["2.1135.0",{"_index":467,"title":{},"body":{"dependencies.html":{}}}],["2.2.2",{"_index":461,"title":{},"body":{"dependencies.html":{}}}],["2.6.1",{"_index":474,"title":{},"body":{"dependencies.html":{}}}],["21",{"_index":224,"title":{},"body":{"classes/AuthorsResolver.html":{}}}],["22",{"_index":227,"title":{},"body":{"classes/AuthorsResolver.html":{}}}],["3.0.2",{"_index":482,"title":{},"body":{"dependencies.html":{}}}],["3.6.3",{"_index":466,"title":{},"body":{"dependencies.html":{}}}],["4.0.0",{"_index":477,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":549,"title":{},"body":{"overview.html":{},"controllers/s3UploadController.html":{}}}],["6.2.4",{"_index":471,"title":{},"body":{"dependencies.html":{}}}],["60s",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["7.2.0",{"_index":484,"title":{},"body":{"dependencies.html":{}}}],["8.0.0",{"_index":453,"title":{},"body":{"dependencies.html":{}}}],["8.2.1",{"_index":458,"title":{},"body":{"dependencies.html":{}}}],["8.3.1",{"_index":456,"title":{},"body":{"dependencies.html":{}}}],["9.0.2",{"_index":457,"title":{},"body":{"dependencies.html":{}}}],["accesskeyid",{"_index":160,"title":{},"body":{"modules/AppModule.html":{}}}],["accumulate",{"_index":9,"title":{},"body":{"controllers/AppController.html":{}}}],["accumulate(data",{"_index":16,"title":{},"body":{"controllers/AppController.html":{}}}],["acl",{"_index":250,"title":{},"body":{"injectables/ImageUploadService.html":{},"classes/PostMedias.html":{},"injectables/s3UploadService.html":{}}}],["aliases",{"_index":682,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allfileupload",{"_index":677,"title":{},"body":{"injectables/s3UploadService.html":{}}}],["allservices",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["amazing",{"_index":528,"title":{},"body":{"index.html":{}}}],["apollo",{"_index":465,"title":{},"body":{"dependencies.html":{}}}],["apollodriver",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["apollodriverconfig",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["app",{"_index":505,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":56,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":497,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":89,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":55,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["args",{"_index":216,"title":{},"body":{"classes/AuthorsResolver.html":{},"classes/s3UploadResolver.html":{}}}],["args('file",{"_index":626,"title":{},"body":{"classes/s3UploadResolver.html":{}}}],["array",{"_index":333,"title":{},"body":{"injectables/PostMediaService.html":{},"classes/PostMedias.html":{},"classes/S3Uploads.html":{},"controllers/s3UploadController.html":{}}}],["array('upload",{"_index":260,"title":{},"body":{"injectables/ImageUploadService.html":{}}}],["async",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AuthorsResolver.html":{},"injectables/ImageUploadService.html":{},"injectables/PostMediaService.html":{},"controllers/s3UploadController.html":{},"classes/s3UploadResolver.html":{},"injectables/s3UploadService.html":{}}}],["auth.guard",{"_index":589,"title":{},"body":{"controllers/s3UploadController.html":{}}}],["auth.guard.ts",{"_index":293,"title":{},"body":{"classes/JwtAuthGuard.html":{},"coverage.html":{}}}],["authguard",{"_index":294,"title":{},"body":{"classes/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":297,"title":{},"body":{"classes/JwtAuthGuard.html":{}}}],["author",{"_index":188,"title":{"classes/Author.html":{}},"body":{"classes/Author.html":{},"classes/AuthorsResolver.html":{},"coverage.html":{},"index.html":{},"properties.html":{}}}],["author(@args('id",{"_index":221,"title":{},"body":{"classes/AuthorsResolver.html":{}}}],["author(id",{"_index":209,"title":{},"body":{"classes/AuthorsResolver.html":{}}}],["authorsresolver",{"_index":207,"title":{"classes/AuthorsResolver.html":{}},"body":{"classes/AuthorsResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["autoschemafile",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["await",{"_index":84,"title":{},"body":{"controllers/AppController.html":{},"injectables/ImageUploadService.html":{},"injectables/PostMediaService.html":{},"controllers/s3UploadController.html":{},"injectables/s3UploadService.html":{}}}],["aws",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["aws.endpoint(configservice.get('do_spaces_endpoint",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["backers",{"_index":529,"title":{},"body":{"index.html":{}}}],["body",{"_index":38,"title":{},"body":{"controllers/AppController.html":{},"injectables/s3UploadService.html":{}}}],["bootstrap",{"_index":437,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":545,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":543,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":248,"title":{},"body":{"injectables/ImageUploadService.html":{},"classes/PostMedias.html":{},"injectables/s3UploadService.html":{}}}],["bucketname",{"_index":653,"title":{},"body":{"injectables/s3UploadService.html":{}}}],["buffer",{"_index":667,"title":{},"body":{"injectables/s3UploadService.html":{}}}],["building",{"_index":493,"title":{},"body":{"index.html":{}}}],["callback",{"_index":709,"title":{},"body":{"miscellaneous/variables.html":{}}}],["called",{"_index":79,"title":{},"body":{"controllers/AppController.html":{}}}],["calling",{"_index":708,"title":{},"body":{"miscellaneous/variables.html":{}}}],["can't",{"_index":353,"title":{},"body":{"injectables/PostMediaService.html":{}}}],["catch",{"_index":289,"title":{},"body":{"injectables/ImageUploadService.html":{},"injectables/PostMediaService.html":{},"controllers/s3UploadController.html":{},"injectables/s3UploadService.html":{}}}],["cats_queue",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["cb",{"_index":254,"title":{},"body":{"injectables/ImageUploadService.html":{},"miscellaneous/variables.html":{}}}],["cb(null",{"_index":259,"title":{},"body":{"injectables/ImageUploadService.html":{},"miscellaneous/variables.html":{}}}],["class",{"_index":58,"title":{"classes/Author.html":{},"classes/AuthorsResolver.html":{},"classes/JwtAuthGuard.html":{},"classes/Post.html":{},"classes/PostMedias.html":{},"classes/S3Uploads.html":{},"classes/createS3Dto.html":{},"classes/s3UploadInput.html":{},"classes/s3UploadResolver.html":{},"classes/s3UploadType.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Author.html":{},"classes/AuthorsResolver.html":{},"injectables/ImageUploadService.html":{},"classes/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/Post.html":{},"injectables/PostMediaService.html":{},"classes/PostMedias.html":{},"classes/S3Uploads.html":{},"coverage.html":{},"classes/createS3Dto.html":{},"dependencies.html":{},"controllers/s3UploadController.html":{},"classes/s3UploadInput.html":{},"classes/s3UploadResolver.html":{},"injectables/s3UploadService.html":{},"classes/s3UploadType.html":{}}}],["classes",{"_index":189,"title":{},"body":{"classes/Author.html":{},"classes/AuthorsResolver.html":{},"classes/JwtAuthGuard.html":{},"classes/Post.html":{},"classes/PostMedias.html":{},"classes/S3Uploads.html":{},"classes/createS3Dto.html":{},"overview.html":{},"classes/s3UploadInput.html":{},"classes/s3UploadResolver.html":{},"classes/s3UploadType.html":{}}}],["client",{"_index":64,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/s3UploadController.html":{}}}],["clientproxy",{"_index":51,"title":{},"body":{"controllers/AppController.html":{},"controllers/s3UploadController.html":{}}}],["clientsmodule",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["clientsmodule.registerasync",{"_index":140,"title":{},"body":{"modules/AppModule.html":{}}}],["cluster_appmodule",{"_index":92,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cmd",{"_index":74,"title":{},"body":{"controllers/AppController.html":{}}}],["config",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtStrategy.html":{},"injectables/PostMediaService.html":{},"controllers/s3UploadController.html":{},"injectables/s3UploadService.html":{}}}],["configservice.get('aws_access_key_id",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('aws_secret_access_key",{"_index":163,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('jwt_secret",{"_index":150,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('mongo_connection_uri",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('nats_connection_url",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["console.log('command",{"_index":75,"title":{},"body":{"controllers/AppController.html":{}}}],["console.log('data",{"_index":670,"title":{},"body":{"injectables/s3UploadService.html":{}}}],["console.log('originalname,rest",{"_index":669,"title":{},"body":{"injectables/s3UploadService.html":{}}}],["console.log('user",{"_index":80,"title":{},"body":{"controllers/AppController.html":{}}}],["console.log(data",{"_index":82,"title":{},"body":{"controllers/AppController.html":{}}}],["const",{"_index":69,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AuthorsResolver.html":{},"injectables/ImageUploadService.html":{},"injectables/PostMediaService.html":{},"classes/PostMedias.html":{},"classes/S3Uploads.html":{},"controllers/s3UploadController.html":{},"classes/s3UploadResolver.html":{},"injectables/s3UploadService.html":{},"miscellaneous/variables.html":{}}}],["constant.json",{"_index":645,"title":{},"body":{"injectables/s3UploadService.html":{}}}],["constant_variable",{"_index":644,"title":{},"body":{"injectables/s3UploadService.html":{}}}],["constant_variable.aws_bucket",{"_index":672,"title":{},"body":{"injectables/s3UploadService.html":{}}}],["constructor",{"_index":59,"title":{},"body":{"controllers/AppController.html":{},"injectables/ImageUploadService.html":{},"injectables/JwtStrategy.html":{},"injectables/PostMediaService.html":{},"controllers/s3UploadController.html":{},"classes/s3UploadResolver.html":{},"injectables/s3UploadService.html":{}}}],["constructor(configservice",{"_index":300,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(postmediamodel",{"_index":329,"title":{},"body":{"injectables/PostMediaService.html":{}}}],["constructor(private",{"_index":625,"title":{},"body":{"classes/s3UploadResolver.html":{}}}],["constructor(s3",{"_index":233,"title":{},"body":{"injectables/ImageUploadService.html":{}}}],["constructor(s3uploadservice",{"_index":617,"title":{},"body":{"classes/s3UploadResolver.html":{}}}],["constructor(s3uploadsmodel",{"_index":631,"title":{},"body":{"injectables/s3UploadService.html":{}}}],["contentdisposition",{"_index":392,"title":{},"body":{"classes/PostMedias.html":{}}}],["contentencoding",{"_index":393,"title":{},"body":{"classes/PostMedias.html":{}}}],["contenttype",{"_index":391,"title":{},"body":{"classes/PostMedias.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/s3UploadController.html":{}},"body":{"controllers/AppController.html":{},"coverage.html":{},"controllers/s3UploadController.html":{}}}],["controller('upload",{"_index":594,"title":{},"body":{"controllers/s3UploadController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{},"overview.html":{},"controllers/s3UploadController.html":{},"miscellaneous/variables.html":{}}}],["coverage",{"_index":407,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":555,"title":{},"body":{"controllers/s3UploadController.html":{},"miscellaneous/variables.html":{}}}],["create(file",{"_index":559,"title":{},"body":{"controllers/s3UploadController.html":{}}}],["created",{"_index":81,"title":{},"body":{"controllers/AppController.html":{}}}],["createdby",{"_index":278,"title":{},"body":{"injectables/ImageUploadService.html":{},"classes/PostMedias.html":{},"controllers/s3UploadController.html":{}}}],["createreadstream",{"_index":648,"title":{},"body":{"injectables/s3UploadService.html":{}}}],["creates3dto",{"_index":427,"title":{"classes/createS3Dto.html":{}},"body":{"coverage.html":{},"classes/createS3Dto.html":{},"classes/s3UploadInput.html":{},"classes/s3UploadType.html":{}}}],["creatorsemail",{"_index":280,"title":{},"body":{"injectables/ImageUploadService.html":{},"classes/PostMedias.html":{},"controllers/s3UploadController.html":{}}}],["credentials",{"_index":159,"title":{},"body":{"modules/AppModule.html":{}}}],["data",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"injectables/s3UploadService.html":{}}}],["db",{"_index":355,"title":{},"body":{"injectables/PostMediaService.html":{}}}],["db/schemas",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["debug",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["decorators",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"classes/Author.html":{},"classes/AuthorsResolver.html":{},"classes/Post.html":{},"classes/PostMedias.html":{},"classes/S3Uploads.html":{},"classes/createS3Dto.html":{},"controllers/s3UploadController.html":{},"classes/s3UploadInput.html":{},"classes/s3UploadResolver.html":{},"classes/s3UploadType.html":{}}}],["default",{"_index":242,"title":{},"body":{"injectables/ImageUploadService.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/Author.html":{},"classes/AuthorsResolver.html":{},"injectables/ImageUploadService.html":{},"injectables/JwtStrategy.html":{},"classes/Post.html":{},"injectables/PostMediaService.html":{},"classes/PostMedias.html":{},"classes/S3Uploads.html":{},"classes/createS3Dto.html":{},"controllers/s3UploadController.html":{},"classes/s3UploadInput.html":{},"classes/s3UploadResolver.html":{},"injectables/s3UploadService.html":{},"classes/s3UploadType.html":{}}}],["delete",{"_index":382,"title":{},"body":{"classes/PostMedias.html":{}}}],["dependencies",{"_index":91,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":442,"title":{},"body":{"classes/createS3Dto.html":{},"index.html":{},"properties.html":{},"classes/s3UploadInput.html":{},"classes/s3UploadType.html":{}}}],["dest",{"_index":692,"title":{},"body":{"miscellaneous/variables.html":{}}}],["destination",{"_index":388,"title":{},"body":{"classes/PostMedias.html":{},"miscellaneous/variables.html":{}}}],["details",{"_index":707,"title":{},"body":{"miscellaneous/variables.html":{}}}],["development",{"_index":506,"title":{},"body":{"index.html":{}}}],["diskstorage",{"_index":698,"title":{},"body":{"miscellaneous/variables.html":{}}}],["document",{"_index":375,"title":{},"body":{"classes/PostMedias.html":{},"classes/S3Uploads.html":{}}}],["documentation",{"_index":408,"title":{},"body":{"coverage.html":{}}}],["documentname",{"_index":651,"title":{},"body":{"injectables/s3UploadService.html":{}}}],["doesn't",{"_index":702,"title":{},"body":{"miscellaneous/variables.html":{}}}],["driver",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["e2e",{"_index":517,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":494,"title":{},"body":{"index.html":{}}}],["elementzerolabs",{"_index":553,"title":{},"body":{"properties.html":{}}}],["email",{"_index":306,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["enable",{"_index":694,"title":{},"body":{"miscellaneous/variables.html":{}}}],["encoding",{"_index":386,"title":{},"body":{"classes/PostMedias.html":{}}}],["endpoint",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["enochstaging",{"_index":249,"title":{},"body":{"injectables/ImageUploadService.html":{}}}],["err",{"_index":660,"title":{},"body":{"injectables/s3UploadService.html":{}}}],["error",{"_index":272,"title":{},"body":{"injectables/ImageUploadService.html":{},"controllers/s3UploadController.html":{},"injectables/s3UploadService.html":{}}}],["error(\"please",{"_index":351,"title":{},"body":{"injectables/PostMediaService.html":{}}}],["error(error_messages.error_file_upload",{"_index":663,"title":{},"body":{"injectables/s3UploadService.html":{}}}],["error(error_messages.error_inserting_to_db",{"_index":666,"title":{},"body":{"injectables/s3UploadService.html":{}}}],["error.message",{"_index":614,"title":{},"body":{"controllers/s3UploadController.html":{}}}],["error_messages",{"_index":643,"title":{},"body":{"injectables/s3UploadService.html":{}}}],["eventpattern",{"_index":52,"title":{},"body":{"controllers/AppController.html":{},"controllers/s3UploadController.html":{}}}],["eventpattern('add_post_id",{"_index":582,"title":{},"body":{"controllers/s3UploadController.html":{}}}],["eventpattern('user_created",{"_index":43,"title":{},"body":{"controllers/AppController.html":{}}}],["executed",{"_index":76,"title":{},"body":{"controllers/AppController.html":{}}}],["exist",{"_index":703,"title":{},"body":{"miscellaneous/variables.html":{}}}],["existssync(uploadpath",{"_index":704,"title":{},"body":{"miscellaneous/variables.html":{}}}],["expiresin",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["export",{"_index":57,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Author.html":{},"classes/AuthorsResolver.html":{},"injectables/ImageUploadService.html":{},"classes/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/Post.html":{},"injectables/PostMediaService.html":{},"classes/PostMedias.html":{},"classes/S3Uploads.html":{},"classes/createS3Dto.html":{},"controllers/s3UploadController.html":{},"classes/s3UploadInput.html":{},"classes/s3UploadResolver.html":{},"injectables/s3UploadService.html":{},"classes/s3UploadType.html":{}}}],["express",{"_index":460,"title":{},"body":{"dependencies.html":{},"controllers/s3UploadController.html":{}}}],["express.multer.file",{"_index":560,"title":{},"body":{"controllers/s3UploadController.html":{}}}],["extends",{"_index":296,"title":{},"body":{"classes/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["extension",{"_index":714,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extractjwt",{"_index":310,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":317,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":319,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["field",{"_index":202,"title":{},"body":{"classes/Author.html":{},"classes/Post.html":{},"classes/createS3Dto.html":{},"classes/s3UploadInput.html":{},"classes/s3UploadType.html":{}}}],["field(undefined",{"_index":198,"title":{},"body":{"classes/Author.html":{},"classes/Post.html":{},"classes/s3UploadType.html":{}}}],["field({nullable",{"_index":196,"title":{},"body":{"classes/Author.html":{}}}],["fieldname",{"_index":384,"title":{},"body":{"classes/PostMedias.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Author.html":{},"classes/AuthorsResolver.html":{},"injectables/ImageUploadService.html":{},"classes/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/Post.html":{},"injectables/PostMediaService.html":{},"classes/PostMedias.html":{},"classes/S3Uploads.html":{},"coverage.html":{},"classes/createS3Dto.html":{},"controllers/s3UploadController.html":{},"classes/s3UploadInput.html":{},"classes/s3UploadResolver.html":{},"injectables/s3UploadService.html":{},"classes/s3UploadType.html":{},"miscellaneous/variables.html":{}}}],["file')@useinterceptors(undefined",{"_index":579,"title":{},"body":{"controllers/s3UploadController.html":{}}}],["file.originalname",{"_index":258,"title":{},"body":{"injectables/ImageUploadService.html":{}}}],["file?.location",{"_index":268,"title":{},"body":{"injectables/ImageUploadService.html":{}}}],["fileextentiontype",{"_index":649,"title":{},"body":{"injectables/s3UploadService.html":{}}}],["fileinterceptor",{"_index":587,"title":{},"body":{"controllers/s3UploadController.html":{}}}],["filename",{"_index":389,"title":{},"body":{"classes/PostMedias.html":{},"injectables/s3UploadService.html":{},"miscellaneous/variables.html":{}}}],["filepath",{"_index":255,"title":{},"body":{"injectables/ImageUploadService.html":{},"injectables/s3UploadService.html":{}}}],["files",{"_index":241,"title":{},"body":{"injectables/ImageUploadService.html":{},"injectables/PostMediaService.html":{},"controllers/s3UploadController.html":{},"injectables/s3UploadService.html":{}}}],["files.map((file",{"_index":267,"title":{},"body":{"injectables/ImageUploadService.html":{}}}],["files.map(async",{"_index":675,"title":{},"body":{"injectables/s3UploadService.html":{}}}],["files.map(file",{"_index":357,"title":{},"body":{"injectables/PostMediaService.html":{}}}],["filesinterceptor",{"_index":588,"title":{},"body":{"controllers/s3UploadController.html":{}}}],["filesize",{"_index":696,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filesurl",{"_index":284,"title":{},"body":{"injectables/ImageUploadService.html":{},"classes/PostMedias.html":{},"classes/S3Uploads.html":{},"controllers/s3UploadController.html":{},"injectables/s3UploadService.html":{}}}],["fileupload",{"_index":231,"title":{},"body":{"injectables/ImageUploadService.html":{},"classes/s3UploadResolver.html":{}}}],["fileupload(@req",{"_index":269,"title":{},"body":{"injectables/ImageUploadService.html":{}}}],["fileupload(req",{"_index":235,"title":{},"body":{"injectables/ImageUploadService.html":{}}}],["fileuploaded",{"_index":638,"title":{},"body":{"injectables/s3UploadService.html":{}}}],["fileuploadservice",{"_index":616,"title":{},"body":{"classes/s3UploadResolver.html":{}}}],["fileuploadservice(file",{"_index":619,"title":{},"body":{"classes/s3UploadResolver.html":{}}}],["fileurl",{"_index":360,"title":{},"body":{"classes/PostMedias.html":{},"classes/S3Uploads.html":{},"classes/createS3Dto.html":{},"controllers/s3UploadController.html":{},"classes/s3UploadInput.html":{},"injectables/s3UploadService.html":{},"classes/s3UploadType.html":{}}}],["firstname",{"_index":192,"title":{},"body":{"classes/Author.html":{},"classes/AuthorsResolver.html":{}}}],["folder",{"_index":701,"title":{},"body":{"miscellaneous/variables.html":{}}}],["framework",{"_index":492,"title":{},"body":{"index.html":{}}}],["function",{"_index":436,"title":{},"body":{"coverage.html":{}}}],["function(err",{"_index":659,"title":{},"body":{"injectables/s3UploadService.html":{}}}],["function(request",{"_index":253,"title":{},"body":{"injectables/ImageUploadService.html":{}}}],["functions",{"_index":486,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generated",{"_index":712,"title":{},"body":{"miscellaneous/variables.html":{}}}],["get('/m2",{"_index":33,"title":{},"body":{"controllers/AppController.html":{}}}],["gethello",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getm2",{"_index":11,"title":{},"body":{"controllers/AppController.html":{}}}],["getting",{"_index":488,"title":{"index.html":{}},"body":{}}],["geturls",{"_index":232,"title":{},"body":{"injectables/ImageUploadService.html":{},"injectables/PostMediaService.html":{}}}],["geturls(files",{"_index":239,"title":{},"body":{"injectables/ImageUploadService.html":{},"injectables/PostMediaService.html":{}}}],["graphql",{"_index":137,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{},"classes/s3UploadResolver.html":{},"miscellaneous/variables.html":{}}}],["graphql/resolvers",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqlmodule",{"_index":115,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqlmodule.forroot",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqlpath",{"_index":135,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["graphqlupload",{"_index":623,"title":{},"body":{"classes/s3UploadResolver.html":{}}}],["grow",{"_index":524,"title":{},"body":{"index.html":{}}}],["hello",{"_index":186,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":533,"title":{},"body":{"index.html":{}}}],["https://nestjs.com",{"_index":539,"title":{},"body":{"index.html":{}}}],["id",{"_index":193,"title":{},"body":{"classes/Author.html":{},"classes/AuthorsResolver.html":{},"classes/Post.html":{},"classes/createS3Dto.html":{},"classes/s3UploadInput.html":{},"classes/s3UploadType.html":{}}}],["identifier",{"_index":409,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":318,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["image",{"_index":443,"title":{},"body":{"classes/createS3Dto.html":{},"controllers/s3UploadController.html":{},"classes/s3UploadInput.html":{},"classes/s3UploadType.html":{}}}],["imageuploadservice",{"_index":94,"title":{"injectables/ImageUploadService.html":{}},"body":{"modules/AppModule.html":{},"injectables/ImageUploadService.html":{},"coverage.html":{},"overview.html":{},"controllers/s3UploadController.html":{},"miscellaneous/variables.html":{}}}],["import",{"_index":45,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Author.html":{},"classes/AuthorsResolver.html":{},"injectables/ImageUploadService.html":{},"classes/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/Post.html":{},"injectables/PostMediaService.html":{},"classes/PostMedias.html":{},"classes/S3Uploads.html":{},"classes/createS3Dto.html":{},"controllers/s3UploadController.html":{},"classes/s3UploadInput.html":{},"classes/s3UploadResolver.html":{},"injectables/s3UploadService.html":{},"classes/s3UploadType.html":{}}}],["imports",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/Author.html":{},"classes/AuthorsResolver.html":{},"injectables/ImageUploadService.html":{},"injectables/JwtStrategy.html":{},"classes/Post.html":{},"injectables/PostMediaService.html":{},"classes/PostMedias.html":{},"classes/S3Uploads.html":{},"classes/createS3Dto.html":{},"miscellaneous/functions.html":{},"controllers/s3UploadController.html":{},"classes/s3UploadInput.html":{},"classes/s3UploadResolver.html":{},"injectables/s3UploadService.html":{},"classes/s3UploadType.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Author.html":{},"classes/AuthorsResolver.html":{},"injectables/ImageUploadService.html":{},"classes/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/Post.html":{},"injectables/PostMediaService.html":{},"classes/PostMedias.html":{},"classes/S3Uploads.html":{},"classes/createS3Dto.html":{},"controllers/s3UploadController.html":{},"classes/s3UploadInput.html":{},"classes/s3UploadResolver.html":{},"injectables/s3UploadService.html":{},"classes/s3UploadType.html":{}}}],["inject",{"_index":46,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/s3UploadController.html":{}}}],["inject('nats",{"_index":62,"title":{},"body":{"controllers/AppController.html":{},"controllers/s3UploadController.html":{}}}],["injectable",{"_index":182,"title":{"injectables/AppService.html":{},"injectables/ImageUploadService.html":{},"injectables/JwtStrategy.html":{},"injectables/PostMediaService.html":{},"injectables/s3UploadService.html":{}},"body":{"injectables/AppService.html":{},"injectables/ImageUploadService.html":{},"injectables/JwtStrategy.html":{},"injectables/PostMediaService.html":{},"coverage.html":{},"injectables/s3UploadService.html":{}}}],["injectables",{"_index":183,"title":{},"body":{"injectables/AppService.html":{},"injectables/ImageUploadService.html":{},"injectables/JwtStrategy.html":{},"injectables/PostMediaService.html":{},"overview.html":{},"injectables/s3UploadService.html":{}}}],["injectmodel",{"_index":341,"title":{},"body":{"injectables/PostMediaService.html":{},"injectables/s3UploadService.html":{}}}],["injectmodel('s3uploads",{"_index":646,"title":{},"body":{"injectables/s3UploadService.html":{}}}],["injectmodel(postmedias.name",{"_index":346,"title":{},"body":{"injectables/PostMediaService.html":{}}}],["injects3",{"_index":265,"title":{},"body":{"injectables/ImageUploadService.html":{},"injectables/s3UploadService.html":{}}}],["inputtype",{"_index":447,"title":{},"body":{"classes/createS3Dto.html":{},"classes/s3UploadInput.html":{},"classes/s3UploadType.html":{}}}],["installation",{"_index":502,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":504,"title":{},"body":{"index.html":{}}}],["int",{"_index":203,"title":{},"body":{"classes/Author.html":{},"classes/AuthorsResolver.html":{},"classes/Post.html":{},"classes/createS3Dto.html":{},"classes/s3UploadInput.html":{},"classes/s3UploadType.html":{}}}],["introspection",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["isnotempty",{"_index":448,"title":{},"body":{"classes/createS3Dto.html":{},"classes/s3UploadInput.html":{},"classes/s3UploadType.html":{}}}],["isstring",{"_index":449,"title":{},"body":{"classes/createS3Dto.html":{},"classes/s3UploadInput.html":{},"classes/s3UploadType.html":{}}}],["isstring()@isnotempty",{"_index":444,"title":{},"body":{"classes/createS3Dto.html":{}}}],["join",{"_index":122,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["join(__dirname",{"_index":179,"title":{},"body":{"modules/AppModule.html":{}}}],["join(process.cwd",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["json(`failed",{"_index":613,"title":{},"body":{"controllers/s3UploadController.html":{}}}],["json.stringify(data",{"_index":77,"title":{},"body":{"controllers/AppController.html":{}}}],["jwt",{"_index":313,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwtauthguard",{"_index":291,"title":{"classes/JwtAuthGuard.html":{}},"body":{"classes/JwtAuthGuard.html":{},"coverage.html":{},"controllers/s3UploadController.html":{}}}],["jwtfromrequest",{"_index":316,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["jwtmodule.registerasync",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["jwtsecretrequesttype",{"_index":308,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtservice",{"_index":49,"title":{},"body":{"controllers/AppController.html":{}}}],["jwtstrategy",{"_index":95,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AppModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":536,"title":{},"body":{"index.html":{}}}],["key",{"_index":252,"title":{},"body":{"injectables/ImageUploadService.html":{},"classes/PostMedias.html":{},"injectables/s3UploadService.html":{}}}],["lastname",{"_index":194,"title":{},"body":{"classes/Author.html":{}}}],["license",{"_index":542,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":521,"title":{},"body":{"index.html":{}}}],["limits",{"_index":695,"title":{},"body":{"miscellaneous/variables.html":{}}}],["literal",{"_index":303,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["local",{"_index":463,"title":{},"body":{"dependencies.html":{}}}],["location:string",{"_index":397,"title":{},"body":{"classes/PostMedias.html":{}}}],["login",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["login(@body",{"_index":68,"title":{},"body":{"controllers/AppController.html":{}}}],["login(body",{"_index":35,"title":{},"body":{"controllers/AppController.html":{}}}],["m",{"_index":73,"title":{},"body":{"controllers/AppController.html":{},"controllers/s3UploadController.html":{}}}],["matching",{"_index":87,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Author.html":{},"classes/AuthorsResolver.html":{},"injectables/ImageUploadService.html":{},"classes/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/Post.html":{},"injectables/PostMediaService.html":{},"classes/PostMedias.html":{},"classes/S3Uploads.html":{},"coverage.html":{},"classes/createS3Dto.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"controllers/s3UploadController.html":{},"classes/s3UploadInput.html":{},"classes/s3UploadResolver.html":{},"injectables/s3UploadService.html":{},"classes/s3UploadType.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["media",{"_index":276,"title":{},"body":{"injectables/ImageUploadService.html":{},"injectables/PostMediaService.html":{},"controllers/s3UploadController.html":{}}}],["media._id",{"_index":288,"title":{},"body":{"injectables/ImageUploadService.html":{},"controllers/s3UploadController.html":{}}}],["media.multers3object",{"_index":286,"title":{},"body":{"injectables/ImageUploadService.html":{}}}],["messagepattern",{"_index":53,"title":{},"body":{"controllers/AppController.html":{},"controllers/s3UploadController.html":{}}}],["messagepattern({cmd",{"_index":21,"title":{},"body":{"controllers/AppController.html":{}}}],["metadata",{"_index":396,"title":{},"body":{"classes/PostMedias.html":{},"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/AuthorsResolver.html":{},"injectables/ImageUploadService.html":{},"injectables/JwtStrategy.html":{},"injectables/PostMediaService.html":{},"controllers/s3UploadController.html":{},"classes/s3UploadResolver.html":{},"injectables/s3UploadService.html":{}}}],["mimetype",{"_index":387,"title":{},"body":{"classes/PostMedias.html":{}}}],["miscellaneous",{"_index":485,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":520,"title":{},"body":{"index.html":{}}}],["mkdirsync(uploadpath",{"_index":705,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mode",{"_index":510,"title":{},"body":{"index.html":{}}}],["model",{"_index":330,"title":{},"body":{"injectables/PostMediaService.html":{},"injectables/s3UploadService.html":{}}}],["models/author.model",{"_index":220,"title":{},"body":{"classes/AuthorsResolver.html":{}}}],["modification",{"_index":706,"title":{},"body":{"miscellaneous/variables.html":{}}}],["module",{"_index":88,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["modules",{"_index":90,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{}}}],["mongoose",{"_index":342,"title":{},"body":{"injectables/PostMediaService.html":{},"classes/PostMedias.html":{},"classes/S3Uploads.html":{},"dependencies.html":{},"injectables/s3UploadService.html":{}}}],["mongoose.schema.types.objectid",{"_index":362,"title":{},"body":{"classes/PostMedias.html":{}}}],["mongoosemodule",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["mongoosemodule.forfeature(schemas",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["mongoosemodule.forrootasync",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":532,"title":{},"body":{"index.html":{}}}],["multer",{"_index":244,"title":{},"body":{"injectables/ImageUploadService.html":{},"dependencies.html":{}}}],["multer.options",{"_index":591,"title":{},"body":{"controllers/s3UploadController.html":{}}}],["multerconfig",{"_index":420,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["multerconfig.dest",{"_index":700,"title":{},"body":{"miscellaneous/variables.html":{}}}],["multerobject",{"_index":361,"title":{},"body":{"classes/PostMedias.html":{},"controllers/s3UploadController.html":{}}}],["multeroptions",{"_index":421,"title":{},"body":{"coverage.html":{},"controllers/s3UploadController.html":{},"miscellaneous/variables.html":{}}}],["multers3",{"_index":246,"title":{},"body":{"injectables/ImageUploadService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["multers3object",{"_index":282,"title":{},"body":{"injectables/ImageUploadService.html":{},"classes/PostMedias.html":{}}}],["multifileuploadrestapi",{"_index":628,"title":{},"body":{"injectables/s3UploadService.html":{}}}],["multifileuploadrestapi(files",{"_index":634,"title":{},"body":{"injectables/s3UploadService.html":{}}}],["multiple",{"_index":571,"title":{},"body":{"controllers/s3UploadController.html":{}}}],["mutation",{"_index":622,"title":{},"body":{"classes/s3UploadResolver.html":{}}}],["mutation(undefined",{"_index":620,"title":{},"body":{"classes/s3UploadResolver.html":{}}}],["myśliwiec",{"_index":537,"title":{},"body":{"index.html":{}}}],["name",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AuthorsResolver.html":{},"injectables/ImageUploadService.html":{},"injectables/JwtStrategy.html":{},"injectables/PostMediaService.html":{},"controllers/s3UploadController.html":{},"classes/s3UploadResolver.html":{},"injectables/s3UploadService.html":{},"miscellaneous/variables.html":{}}}],["nats",{"_index":141,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["natshost",{"_index":417,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["natsserverclient",{"_index":65,"title":{},"body":{"controllers/AppController.html":{},"controllers/s3UploadController.html":{}}}],["nest",{"_index":498,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":541,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":110,"title":{},"body":{"modules/AppModule.html":{},"injectables/ImageUploadService.html":{},"dependencies.html":{},"injectables/s3UploadService.html":{}}}],["nestjs/apollo",{"_index":106,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":48,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/ImageUploadService.html":{},"injectables/JwtStrategy.html":{},"injectables/PostMediaService.html":{},"dependencies.html":{},"controllers/s3UploadController.html":{},"injectables/s3UploadService.html":{}}}],["nestjs/config",{"_index":114,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtStrategy.html":{},"injectables/PostMediaService.html":{},"dependencies.html":{},"controllers/s3UploadController.html":{},"injectables/s3UploadService.html":{}}}],["nestjs/core",{"_index":455,"title":{},"body":{"dependencies.html":{}}}],["nestjs/graphql",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"classes/Author.html":{},"classes/AuthorsResolver.html":{},"classes/Post.html":{},"classes/createS3Dto.html":{},"dependencies.html":{},"classes/s3UploadInput.html":{},"classes/s3UploadResolver.html":{},"classes/s3UploadType.html":{}}}],["nestjs/jwt",{"_index":50,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/microservices",{"_index":54,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"dependencies.html":{},"controllers/s3UploadController.html":{}}}],["nestjs/mongoose",{"_index":121,"title":{},"body":{"modules/AppModule.html":{},"injectables/PostMediaService.html":{},"classes/PostMedias.html":{},"classes/S3Uploads.html":{},"dependencies.html":{},"injectables/s3UploadService.html":{}}}],["nestjs/passport",{"_index":295,"title":{},"body":{"classes/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":459,"title":{},"body":{"dependencies.html":{},"controllers/s3UploadController.html":{}}}],["nestjs/serve",{"_index":132,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["new",{"_index":165,"title":{},"body":{"modules/AppModule.html":{},"injectables/PostMediaService.html":{},"coverage.html":{},"injectables/s3UploadService.html":{}}}],["newmedia",{"_index":347,"title":{},"body":{"injectables/PostMediaService.html":{}}}],["newmedia.save",{"_index":349,"title":{},"body":{"injectables/PostMediaService.html":{}}}],["node.js",{"_index":491,"title":{},"body":{"index.html":{}}}],["npm",{"_index":503,"title":{},"body":{"index.html":{}}}],["nullable",{"_index":206,"title":{},"body":{"classes/Author.html":{},"classes/Post.html":{}}}],["number",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"classes/Author.html":{},"classes/AuthorsResolver.html":{},"classes/Post.html":{},"classes/PostMedias.html":{}}}],["object",{"_index":691,"title":{},"body":{"miscellaneous/variables.html":{}}}],["objecttype",{"_index":204,"title":{},"body":{"classes/Author.html":{},"classes/Post.html":{},"classes/createS3Dto.html":{},"classes/s3UploadInput.html":{},"classes/s3UploadType.html":{}}}],["onapplicationbootstrap",{"_index":14,"title":{},"body":{"controllers/AppController.html":{}}}],["open",{"_index":522,"title":{},"body":{"index.html":{}}}],["optional",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"classes/Author.html":{},"classes/AuthorsResolver.html":{},"injectables/ImageUploadService.html":{},"injectables/JwtStrategy.html":{},"classes/Post.html":{},"injectables/PostMediaService.html":{},"classes/PostMedias.html":{},"classes/createS3Dto.html":{},"controllers/s3UploadController.html":{},"classes/s3UploadResolver.html":{},"injectables/s3UploadService.html":{},"classes/s3UploadType.html":{}}}],["options",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["original",{"_index":713,"title":{},"body":{"miscellaneous/variables.html":{}}}],["originalname",{"_index":385,"title":{},"body":{"classes/PostMedias.html":{},"injectables/s3UploadService.html":{}}}],["out",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"injectables/PostMediaService.html":{},"overview.html":{}}}],["overview",{"_index":546,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":451,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["parameters",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthorsResolver.html":{},"injectables/ImageUploadService.html":{},"injectables/JwtStrategy.html":{},"injectables/PostMediaService.html":{},"controllers/s3UploadController.html":{},"classes/s3UploadResolver.html":{},"injectables/s3UploadService.html":{}}}],["params",{"_index":655,"title":{},"body":{"injectables/s3UploadService.html":{}}}],["parent",{"_index":217,"title":{},"body":{"classes/AuthorsResolver.html":{}}}],["passing",{"_index":710,"title":{},"body":{"miscellaneous/variables.html":{}}}],["passport",{"_index":312,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportstrategy",{"_index":309,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":314,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["path",{"_index":123,"title":{},"body":{"modules/AppModule.html":{},"classes/PostMedias.html":{},"controllers/s3UploadController.html":{},"injectables/s3UploadService.html":{}}}],["path')@useinterceptors(undefined",{"_index":568,"title":{},"body":{"controllers/s3UploadController.html":{}}}],["path.basename(filename",{"_index":652,"title":{},"body":{"injectables/s3UploadService.html":{}}}],["path.extname(filename",{"_index":650,"title":{},"body":{"injectables/s3UploadService.html":{}}}],["payload",{"_index":71,"title":{},"body":{"controllers/AppController.html":{}}}],["perfileupload",{"_index":671,"title":{},"body":{"injectables/s3UploadService.html":{}}}],["perfileupload(file",{"_index":676,"title":{},"body":{"injectables/s3UploadService.html":{}}}],["perfileuploadpromises",{"_index":674,"title":{},"body":{"injectables/s3UploadService.html":{}}}],["playground",{"_index":175,"title":{},"body":{"modules/AppModule.html":{}}}],["please",{"_index":531,"title":{},"body":{"index.html":{}}}],["post",{"_index":47,"title":{"classes/Post.html":{}},"body":{"controllers/AppController.html":{},"classes/Author.html":{},"classes/Post.html":{},"coverage.html":{},"controllers/s3UploadController.html":{}}}],["post('/login",{"_index":36,"title":{},"body":{"controllers/AppController.html":{}}}],["post('do",{"_index":610,"title":{},"body":{"controllers/s3UploadController.html":{}}}],["post('multi",{"_index":574,"title":{},"body":{"controllers/s3UploadController.html":{}}}],["post('single",{"_index":578,"title":{},"body":{"controllers/s3UploadController.html":{}}}],["post('upload",{"_index":600,"title":{},"body":{"controllers/s3UploadController.html":{}}}],["post.model",{"_index":205,"title":{},"body":{"classes/Author.html":{}}}],["postid",{"_index":339,"title":{},"body":{"injectables/PostMediaService.html":{},"classes/PostMedias.html":{},"controllers/s3UploadController.html":{}}}],["postmedia.service",{"_index":266,"title":{},"body":{"injectables/ImageUploadService.html":{}}}],["postmediamodel",{"_index":332,"title":{},"body":{"injectables/PostMediaService.html":{}}}],["postmedias",{"_index":336,"title":{"classes/PostMedias.html":{}},"body":{"injectables/PostMediaService.html":{},"classes/PostMedias.html":{},"coverage.html":{}}}],["postmedias.name",{"_index":718,"title":{},"body":{"miscellaneous/variables.html":{}}}],["postmediaschema",{"_index":398,"title":{},"body":{"classes/PostMedias.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["postmediasdocument",{"_index":343,"title":{},"body":{"injectables/PostMediaService.html":{},"classes/PostMedias.html":{},"miscellaneous/typealiases.html":{}}}],["postmediaservice",{"_index":96,"title":{"injectables/PostMediaService.html":{}},"body":{"modules/AppModule.html":{},"injectables/ImageUploadService.html":{},"injectables/PostMediaService.html":{},"coverage.html":{},"overview.html":{},"controllers/s3UploadController.html":{},"miscellaneous/variables.html":{}}}],["posts",{"_index":195,"title":{},"body":{"classes/Author.html":{},"classes/AuthorsResolver.html":{}}}],["posts(@parent",{"_index":223,"title":{},"body":{"classes/AuthorsResolver.html":{}}}],["posts(author",{"_index":213,"title":{},"body":{"classes/AuthorsResolver.html":{}}}],["prefix",{"_index":554,"title":{},"body":{"controllers/s3UploadController.html":{}}}],["private",{"_index":60,"title":{},"body":{"controllers/AppController.html":{},"injectables/ImageUploadService.html":{},"injectables/JwtStrategy.html":{},"injectables/PostMediaService.html":{},"controllers/s3UploadController.html":{},"injectables/s3UploadService.html":{}}}],["process.env.max_file_size",{"_index":697,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.nats_connection_url",{"_index":716,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.prefix",{"_index":136,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["production",{"_index":512,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":490,"title":{},"body":{"index.html":{}}}],["project",{"_index":523,"title":{},"body":{"index.html":{}}}],["promise",{"_index":212,"title":{},"body":{"classes/AuthorsResolver.html":{},"controllers/s3UploadController.html":{},"injectables/s3UploadService.html":{}}}],["promise((resolve",{"_index":656,"title":{},"body":{"injectables/s3UploadService.html":{}}}],["promise.all(perfileuploadpromises",{"_index":678,"title":{},"body":{"injectables/s3UploadService.html":{}}}],["prop",{"_index":366,"title":{},"body":{"classes/PostMedias.html":{},"classes/S3Uploads.html":{}}}],["prop({type",{"_index":363,"title":{},"body":{"classes/PostMedias.html":{},"classes/S3Uploads.html":{}}}],["properties",{"_index":191,"title":{"properties.html":{}},"body":{"classes/Author.html":{},"injectables/ImageUploadService.html":{},"classes/Post.html":{},"classes/PostMedias.html":{},"classes/S3Uploads.html":{},"classes/createS3Dto.html":{},"properties.html":{},"classes/s3UploadInput.html":{},"classes/s3UploadType.html":{}}}],["providers",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["public",{"_index":180,"title":{},"body":{"modules/AppModule.html":{},"injectables/ImageUploadService.html":{},"injectables/s3UploadService.html":{}}}],["public/images",{"_index":693,"title":{},"body":{"miscellaneous/variables.html":{}}}],["query",{"_index":218,"title":{},"body":{"classes/AuthorsResolver.html":{},"classes/s3UploadResolver.html":{}}}],["query(undefined",{"_index":210,"title":{},"body":{"classes/AuthorsResolver.html":{}}}],["queue",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["random",{"_index":711,"title":{},"body":{"miscellaneous/variables.html":{}}}],["read",{"_index":251,"title":{},"body":{"injectables/ImageUploadService.html":{},"index.html":{},"injectables/s3UploadService.html":{}}}],["readonly",{"_index":61,"title":{},"body":{"controllers/AppController.html":{},"injectables/ImageUploadService.html":{},"injectables/JwtStrategy.html":{},"injectables/PostMediaService.html":{},"classes/createS3Dto.html":{},"controllers/s3UploadController.html":{},"classes/s3UploadInput.html":{},"classes/s3UploadResolver.html":{},"injectables/s3UploadService.html":{},"classes/s3UploadType.html":{}}}],["record",{"_index":42,"title":{},"body":{"controllers/AppController.html":{}}}],["reflect",{"_index":479,"title":{},"body":{"dependencies.html":{}}}],["reject",{"_index":657,"title":{},"body":{"injectables/s3UploadService.html":{}}}],["reject(err",{"_index":661,"title":{},"body":{"injectables/s3UploadService.html":{}}}],["repository",{"_index":501,"title":{},"body":{"index.html":{}}}],["req",{"_index":238,"title":{},"body":{"injectables/ImageUploadService.html":{},"controllers/s3UploadController.html":{},"miscellaneous/variables.html":{}}}],["req?.files",{"_index":283,"title":{},"body":{"injectables/ImageUploadService.html":{}}}],["req?.user?.email",{"_index":281,"title":{},"body":{"injectables/ImageUploadService.html":{}}}],["req?.user?.id",{"_index":279,"title":{},"body":{"injectables/ImageUploadService.html":{}}}],["request",{"_index":561,"title":{},"body":{"controllers/s3UploadController.html":{}}}],["require('multer",{"_index":262,"title":{},"body":{"injectables/ImageUploadService.html":{},"miscellaneous/variables.html":{}}}],["require('path",{"_index":641,"title":{},"body":{"injectables/s3UploadService.html":{}}}],["res",{"_index":236,"title":{},"body":{"injectables/ImageUploadService.html":{},"controllers/s3UploadController.html":{}}}],["res.status(201).json",{"_index":285,"title":{},"body":{"injectables/ImageUploadService.html":{}}}],["res.status(404).json(`failed",{"_index":273,"title":{},"body":{"injectables/ImageUploadService.html":{}}}],["res.status(500).json(`failed",{"_index":290,"title":{},"body":{"injectables/ImageUploadService.html":{}}}],["reset",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["resolve(data",{"_index":662,"title":{},"body":{"injectables/s3UploadService.html":{}}}],["resolve(data.location",{"_index":673,"title":{},"body":{"injectables/s3UploadService.html":{}}}],["resolvefield",{"_index":214,"title":{},"body":{"classes/AuthorsResolver.html":{}}}],["resolver",{"_index":219,"title":{},"body":{"classes/AuthorsResolver.html":{},"classes/s3UploadResolver.html":{}}}],["resolvers",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["resourceid",{"_index":287,"title":{},"body":{"injectables/ImageUploadService.html":{},"injectables/PostMediaService.html":{},"controllers/s3UploadController.html":{}}}],["response",{"_index":562,"title":{},"body":{"controllers/s3UploadController.html":{},"injectables/s3UploadService.html":{}}}],["response.location",{"_index":664,"title":{},"body":{"injectables/s3UploadService.html":{}}}],["rest",{"_index":668,"title":{},"body":{"injectables/s3UploadService.html":{}}}],["result",{"_index":597,"title":{},"body":{"controllers/s3UploadController.html":{},"classes/s3UploadResolver.html":{}}}],["results",{"_index":86,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Author.html":{},"classes/AuthorsResolver.html":{},"injectables/ImageUploadService.html":{},"classes/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/Post.html":{},"injectables/PostMediaService.html":{},"classes/PostMedias.html":{},"classes/S3Uploads.html":{},"coverage.html":{},"classes/createS3Dto.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"controllers/s3UploadController.html":{},"classes/s3UploadInput.html":{},"classes/s3UploadResolver.html":{},"injectables/s3UploadService.html":{},"classes/s3UploadType.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["ret",{"_index":379,"title":{},"body":{"classes/PostMedias.html":{}}}],["ret.__v",{"_index":383,"title":{},"body":{"classes/PostMedias.html":{}}}],["ret._id",{"_index":381,"title":{},"body":{"classes/PostMedias.html":{}}}],["ret.id",{"_index":380,"title":{},"body":{"classes/PostMedias.html":{}}}],["return",{"_index":66,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/AuthorsResolver.html":{},"injectables/ImageUploadService.html":{},"injectables/JwtStrategy.html":{},"injectables/PostMediaService.html":{},"controllers/s3UploadController.html":{},"classes/s3UploadResolver.html":{},"injectables/s3UploadService.html":{}}}],["returns",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/AuthorsResolver.html":{},"injectables/ImageUploadService.html":{},"injectables/JwtStrategy.html":{},"injectables/PostMediaService.html":{},"controllers/s3UploadController.html":{},"classes/s3UploadResolver.html":{},"injectables/s3UploadService.html":{}}}],["reupload",{"_index":352,"title":{},"body":{"injectables/PostMediaService.html":{}}}],["rimraf",{"_index":481,"title":{},"body":{"dependencies.html":{}}}],["rootpath",{"_index":178,"title":{},"body":{"modules/AppModule.html":{}}}],["run",{"_index":507,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":483,"title":{},"body":{"dependencies.html":{}}}],["s3",{"_index":111,"title":{},"body":{"modules/AppModule.html":{},"injectables/ImageUploadService.html":{},"dependencies.html":{},"injectables/s3UploadService.html":{},"miscellaneous/variables.html":{}}}],["s3module",{"_index":109,"title":{},"body":{"modules/AppModule.html":{}}}],["s3module.forrootasync",{"_index":157,"title":{},"body":{"modules/AppModule.html":{}}}],["s3uploadcontroller",{"_index":103,"title":{"controllers/s3UploadController.html":{}},"body":{"modules/AppModule.html":{},"coverage.html":{},"controllers/s3UploadController.html":{},"miscellaneous/variables.html":{}}}],["s3uploadinput",{"_index":428,"title":{"classes/s3UploadInput.html":{}},"body":{"coverage.html":{},"classes/createS3Dto.html":{},"classes/s3UploadInput.html":{},"classes/s3UploadType.html":{}}}],["s3uploadresolver",{"_index":434,"title":{"classes/s3UploadResolver.html":{}},"body":{"coverage.html":{},"classes/s3UploadResolver.html":{},"miscellaneous/variables.html":{}}}],["s3uploads",{"_index":400,"title":{"classes/S3Uploads.html":{}},"body":{"classes/S3Uploads.html":{},"coverage.html":{},"injectables/s3UploadService.html":{}}}],["s3uploads.name",{"_index":717,"title":{},"body":{"miscellaneous/variables.html":{}}}],["s3uploadsdocument",{"_index":404,"title":{},"body":{"classes/S3Uploads.html":{},"injectables/s3UploadService.html":{},"miscellaneous/typealiases.html":{}}}],["s3uploadservice",{"_index":97,"title":{"injectables/s3UploadService.html":{}},"body":{"modules/AppModule.html":{},"coverage.html":{},"overview.html":{},"controllers/s3UploadController.html":{},"classes/s3UploadResolver.html":{},"injectables/s3UploadService.html":{},"miscellaneous/variables.html":{}}}],["s3uploadsmodel",{"_index":633,"title":{},"body":{"injectables/s3UploadService.html":{}}}],["s3uploadsschema",{"_index":405,"title":{},"body":{"classes/S3Uploads.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["s3uploadtype",{"_index":429,"title":{"classes/s3UploadType.html":{}},"body":{"coverage.html":{},"classes/createS3Dto.html":{},"classes/s3UploadInput.html":{},"classes/s3UploadType.html":{}}}],["saf",{"_index":222,"title":{},"body":{"classes/AuthorsResolver.html":{}}}],["satish",{"_index":226,"title":{},"body":{"classes/AuthorsResolver.html":{}}}],["satish22",{"_index":228,"title":{},"body":{"classes/AuthorsResolver.html":{}}}],["savetodb",{"_index":327,"title":{},"body":{"injectables/PostMediaService.html":{}}}],["savetodb(media",{"_index":335,"title":{},"body":{"injectables/PostMediaService.html":{}}}],["scalable",{"_index":495,"title":{},"body":{"index.html":{}}}],["schema",{"_index":373,"title":{},"body":{"classes/PostMedias.html":{},"classes/S3Uploads.html":{},"miscellaneous/variables.html":{}}}],["schema/postmedia",{"_index":345,"title":{},"body":{"injectables/PostMediaService.html":{}}}],["schema/postmedia.ts",{"_index":359,"title":{},"body":{"classes/PostMedias.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["schema/postmedia.ts:16",{"_index":365,"title":{},"body":{"classes/PostMedias.html":{}}}],["schema/postmedia.ts:19",{"_index":367,"title":{},"body":{"classes/PostMedias.html":{}}}],["schema/postmedia.ts:22",{"_index":372,"title":{},"body":{"classes/PostMedias.html":{}}}],["schema/postmedia.ts:25",{"_index":368,"title":{},"body":{"classes/PostMedias.html":{}}}],["schema/postmedia.ts:28",{"_index":369,"title":{},"body":{"classes/PostMedias.html":{}}}],["schema/postmedia.ts:46",{"_index":370,"title":{},"body":{"classes/PostMedias.html":{}}}],["schema/postmedia.ts:72",{"_index":371,"title":{},"body":{"classes/PostMedias.html":{}}}],["schema/s3uploads",{"_index":642,"title":{},"body":{"injectables/s3UploadService.html":{}}}],["schema/s3uploads.ts",{"_index":401,"title":{},"body":{"classes/S3Uploads.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["schema/s3uploads.ts:12",{"_index":402,"title":{},"body":{"classes/S3Uploads.html":{}}}],["schema/s3uploads.ts:9",{"_index":403,"title":{},"body":{"classes/S3Uploads.html":{}}}],["schemafactory",{"_index":374,"title":{},"body":{"classes/PostMedias.html":{},"classes/S3Uploads.html":{}}}],["schemafactory.createforclass(postmedias",{"_index":399,"title":{},"body":{"classes/PostMedias.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(s3uploads",{"_index":406,"title":{},"body":{"classes/S3Uploads.html":{},"miscellaneous/variables.html":{}}}],["schemas",{"_index":125,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sdk",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["secret",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["secretaccesskey",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["secretorkey",{"_index":320,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["server",{"_index":63,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"dependencies.html":{},"index.html":{},"controllers/s3UploadController.html":{}}}],["serveroot",{"_index":181,"title":{},"body":{"modules/AppModule.html":{}}}],["servers",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["serversideencryption",{"_index":395,"title":{},"body":{"classes/PostMedias.html":{}}}],["servestaticmodule",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forroot",{"_index":177,"title":{},"body":{"modules/AppModule.html":{}}}],["service",{"_index":78,"title":{},"body":{"controllers/AppController.html":{}}}],["services",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["services/s3upload.service",{"_index":590,"title":{},"body":{"controllers/s3UploadController.html":{}}}],["side",{"_index":496,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["single",{"_index":567,"title":{},"body":{"controllers/s3UploadController.html":{}}}],["size",{"_index":390,"title":{},"body":{"classes/PostMedias.html":{},"miscellaneous/variables.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Author.html":{},"classes/AuthorsResolver.html":{},"injectables/ImageUploadService.html":{},"classes/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/Post.html":{},"injectables/PostMediaService.html":{},"classes/PostMedias.html":{},"classes/S3Uploads.html":{},"classes/createS3Dto.html":{},"index.html":{},"controllers/s3UploadController.html":{},"classes/s3UploadInput.html":{},"classes/s3UploadResolver.html":{},"injectables/s3UploadService.html":{},"classes/s3UploadType.html":{}}}],["sponsors",{"_index":526,"title":{},"body":{"index.html":{}}}],["src/.../app.module.ts",{"_index":687,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../config.ts",{"_index":690,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../dospaceupload.service.ts",{"_index":689,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../index.ts",{"_index":686,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":487,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../multer.options.ts",{"_index":688,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../postmedia.ts",{"_index":683,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../s3uploads.ts",{"_index":684,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:19",{"_index":32,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:24",{"_index":37,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:31",{"_index":34,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:36",{"_index":24,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:42",{"_index":44,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:48",{"_index":40,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.service.ts",{"_index":184,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":185,"title":{},"body":{"injectables/AppService.html":{}}}],["src/config.ts",{"_index":416,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/controllers/index.ts",{"_index":418,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/controllers/multer.options.ts",{"_index":419,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/controllers/s3upload.controller.ts",{"_index":422,"title":{},"body":{"coverage.html":{},"controllers/s3UploadController.html":{}}}],["src/controllers/s3upload.controller.ts:36",{"_index":583,"title":{},"body":{"controllers/s3UploadController.html":{}}}],["src/controllers/s3upload.controller.ts:42",{"_index":576,"title":{},"body":{"controllers/s3UploadController.html":{}}}],["src/controllers/s3upload.controller.ts:52",{"_index":569,"title":{},"body":{"controllers/s3UploadController.html":{}}}],["src/controllers/s3upload.controller.ts:66",{"_index":572,"title":{},"body":{"controllers/s3UploadController.html":{}}}],["src/controllers/s3upload.controller.ts:82",{"_index":580,"title":{},"body":{"controllers/s3UploadController.html":{}}}],["src/controllers/s3upload.controller.ts:89",{"_index":564,"title":{},"body":{"controllers/s3UploadController.html":{}}}],["src/db/schemas/index.ts",{"_index":423,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/db/schemas/s3",{"_index":344,"title":{},"body":{"injectables/PostMediaService.html":{},"classes/PostMedias.html":{},"classes/S3Uploads.html":{},"coverage.html":{},"injectables/s3UploadService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/graphql/dto/creates3dto.ts",{"_index":426,"title":{},"body":{"coverage.html":{},"classes/createS3Dto.html":{},"classes/s3UploadInput.html":{},"classes/s3UploadType.html":{}}}],["src/graphql/dto/creates3dto.ts:10",{"_index":446,"title":{},"body":{"classes/createS3Dto.html":{}}}],["src/graphql/dto/creates3dto.ts:16",{"_index":680,"title":{},"body":{"classes/s3UploadType.html":{}}}],["src/graphql/dto/creates3dto.ts:18",{"_index":679,"title":{},"body":{"classes/s3UploadType.html":{}}}],["src/graphql/dto/creates3dto.ts:24",{"_index":615,"title":{},"body":{"classes/s3UploadInput.html":{}}}],["src/graphql/dto/creates3dto.ts:8",{"_index":445,"title":{},"body":{"classes/createS3Dto.html":{}}}],["src/graphql/models/author.model.ts",{"_index":190,"title":{},"body":{"classes/Author.html":{},"coverage.html":{}}}],["src/graphql/models/author.model.ts:10",{"_index":197,"title":{},"body":{"classes/Author.html":{}}}],["src/graphql/models/author.model.ts:13",{"_index":200,"title":{},"body":{"classes/Author.html":{}}}],["src/graphql/models/author.model.ts:16",{"_index":201,"title":{},"body":{"classes/Author.html":{}}}],["src/graphql/models/author.model.ts:7",{"_index":199,"title":{},"body":{"classes/Author.html":{}}}],["src/graphql/models/post.model.ts",{"_index":321,"title":{},"body":{"classes/Post.html":{},"coverage.html":{}}}],["src/graphql/models/post.model.ts:12",{"_index":325,"title":{},"body":{"classes/Post.html":{}}}],["src/graphql/models/post.model.ts:6",{"_index":323,"title":{},"body":{"classes/Post.html":{}}}],["src/graphql/models/post.model.ts:9",{"_index":324,"title":{},"body":{"classes/Post.html":{}}}],["src/graphql/resolvers/authors.resolver.ts",{"_index":208,"title":{},"body":{"classes/AuthorsResolver.html":{},"coverage.html":{}}}],["src/graphql/resolvers/authors.resolver.ts:14",{"_index":211,"title":{},"body":{"classes/AuthorsResolver.html":{}}}],["src/graphql/resolvers/authors.resolver.ts:23",{"_index":215,"title":{},"body":{"classes/AuthorsResolver.html":{}}}],["src/graphql/resolvers/index.ts",{"_index":432,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/graphql/resolvers/s3upload.resolver.ts",{"_index":433,"title":{},"body":{"coverage.html":{},"classes/s3UploadResolver.html":{}}}],["src/graphql/resolvers/s3upload.resolver.ts:6",{"_index":618,"title":{},"body":{"classes/s3UploadResolver.html":{}}}],["src/graphql/resolvers/s3upload.resolver.ts:9",{"_index":621,"title":{},"body":{"classes/s3UploadResolver.html":{}}}],["src/guards/jwt",{"_index":292,"title":{},"body":{"classes/JwtAuthGuard.html":{},"coverage.html":{},"controllers/s3UploadController.html":{}}}],["src/main.ts",{"_index":435,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/schema.gql",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["src/services/dospaceupload.service",{"_index":593,"title":{},"body":{"controllers/s3UploadController.html":{}}}],["src/services/dospaceupload.service.ts",{"_index":229,"title":{},"body":{"injectables/ImageUploadService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/services/dospaceupload.service.ts:14",{"_index":261,"title":{},"body":{"injectables/ImageUploadService.html":{}}}],["src/services/dospaceupload.service.ts:26",{"_index":240,"title":{},"body":{"injectables/ImageUploadService.html":{}}}],["src/services/dospaceupload.service.ts:32",{"_index":237,"title":{},"body":{"injectables/ImageUploadService.html":{}}}],["src/services/dospaceupload.service.ts:9",{"_index":234,"title":{},"body":{"injectables/ImageUploadService.html":{}}}],["src/services/index.ts",{"_index":438,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/services/postmedia.service",{"_index":592,"title":{},"body":{"controllers/s3UploadController.html":{}}}],["src/services/postmedia.service.ts",{"_index":326,"title":{},"body":{"injectables/PostMediaService.html":{},"coverage.html":{}}}],["src/services/postmedia.service.ts:11",{"_index":331,"title":{},"body":{"injectables/PostMediaService.html":{}}}],["src/services/postmedia.service.ts:18",{"_index":337,"title":{},"body":{"injectables/PostMediaService.html":{}}}],["src/services/postmedia.service.ts:27",{"_index":340,"title":{},"body":{"injectables/PostMediaService.html":{}}}],["src/services/postmedia.service.ts:35",{"_index":334,"title":{},"body":{"injectables/PostMediaService.html":{}}}],["src/services/s3upload.service",{"_index":624,"title":{},"body":{"classes/s3UploadResolver.html":{}}}],["src/services/s3upload.service.ts",{"_index":439,"title":{},"body":{"coverage.html":{},"injectables/s3UploadService.html":{}}}],["src/services/s3upload.service.ts:15",{"_index":632,"title":{},"body":{"injectables/s3UploadService.html":{}}}],["src/services/s3upload.service.ts:22",{"_index":637,"title":{},"body":{"injectables/s3UploadService.html":{}}}],["src/services/s3upload.service.ts:61",{"_index":640,"title":{},"body":{"injectables/s3UploadService.html":{}}}],["src/services/s3upload.service.ts:99",{"_index":635,"title":{},"body":{"injectables/s3UploadService.html":{}}}],["src/stratagies/jwt.strategy.ts",{"_index":298,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/stratagies/jwt.strategy.ts:21",{"_index":304,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/stratagies/jwt.strategy.ts:9",{"_index":301,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["start",{"_index":508,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":511,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":513,"title":{},"body":{"index.html":{}}}],["started",{"_index":489,"title":{"index.html":{}},"body":{}}],["starter",{"_index":500,"title":{},"body":{"index.html":{}}}],["statements",{"_index":410,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":133,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{},"controllers/s3UploadController.html":{}}}],["status(500",{"_index":612,"title":{},"body":{"controllers/s3UploadController.html":{}}}],["stay",{"_index":534,"title":{},"body":{"index.html":{}}}],["storage",{"_index":245,"title":{},"body":{"injectables/ImageUploadService.html":{},"miscellaneous/variables.html":{}}}],["storageclass",{"_index":394,"title":{},"body":{"classes/PostMedias.html":{}}}],["store",{"_index":354,"title":{},"body":{"injectables/PostMediaService.html":{}}}],["stratagies/jwt.strategy",{"_index":134,"title":{},"body":{"modules/AppModule.html":{}}}],["strategy",{"_index":311,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/Author.html":{},"injectables/JwtStrategy.html":{},"classes/Post.html":{},"injectables/PostMediaService.html":{},"classes/PostMedias.html":{},"classes/S3Uploads.html":{},"classes/createS3Dto.html":{},"classes/s3UploadInput.html":{},"classes/s3UploadResolver.html":{},"classes/s3UploadType.html":{}}}],["sub",{"_index":307,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["sum",{"_index":22,"title":{},"body":{"controllers/AppController.html":{}}}],["super",{"_index":315,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["support",{"_index":527,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":544,"title":{},"body":{"modules.html":{}}}],["table",{"_index":441,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":440,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":516,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":519,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":518,"title":{},"body":{"index.html":{}}}],["tests",{"_index":515,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":525,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":67,"title":{},"body":{"controllers/AppController.html":{}}}],["this.configservice.get('aws_bucket",{"_index":654,"title":{},"body":{"injectables/s3UploadService.html":{}}}],["this.configservice.get('file_url')}/${file.filename",{"_index":358,"title":{},"body":{"injectables/PostMediaService.html":{},"controllers/s3UploadController.html":{}}}],["this.geturls(req.files",{"_index":275,"title":{},"body":{"injectables/ImageUploadService.html":{}}}],["this.imageuploadservice.fileupload(request",{"_index":611,"title":{},"body":{"controllers/s3UploadController.html":{}}}],["this.jwtservice.verify(token",{"_index":72,"title":{},"body":{"controllers/AppController.html":{}}}],["this.natsserverclient.connect",{"_index":85,"title":{},"body":{"controllers/AppController.html":{}}}],["this.postmediamodel(media",{"_index":348,"title":{},"body":{"injectables/PostMediaService.html":{}}}],["this.postmediamodel.findbyidandupdate",{"_index":356,"title":{},"body":{"injectables/PostMediaService.html":{}}}],["this.postmediaservice.geturls(files",{"_index":607,"title":{},"body":{"controllers/s3UploadController.html":{}}}],["this.postmediaservice.savetodb",{"_index":277,"title":{},"body":{"injectables/ImageUploadService.html":{},"controllers/s3UploadController.html":{}}}],["this.postmediaservice.updatepostid(resourceid",{"_index":595,"title":{},"body":{"controllers/s3UploadController.html":{}}}],["this.s3",{"_index":247,"title":{},"body":{"injectables/ImageUploadService.html":{}}}],["this.s3.upload(params",{"_index":658,"title":{},"body":{"injectables/s3UploadService.html":{}}}],["this.s3uploadservice.multifileuploadrestapi(files",{"_index":598,"title":{},"body":{"controllers/s3UploadController.html":{}}}],["this.s3uploadservice.uploadfilegraphql(file",{"_index":627,"title":{},"body":{"classes/s3UploadResolver.html":{}}}],["this.s3uploadservice.uploadfilerestapi(file",{"_index":609,"title":{},"body":{"controllers/s3UploadController.html":{}}}],["this.s3uploadsmodel.create",{"_index":665,"title":{},"body":{"injectables/s3UploadService.html":{}}}],["this.upload(req",{"_index":271,"title":{},"body":{"injectables/ImageUploadService.html":{}}}],["throw",{"_index":350,"title":{},"body":{"injectables/PostMediaService.html":{},"injectables/s3UploadService.html":{}}}],["timestamps",{"_index":376,"title":{},"body":{"classes/PostMedias.html":{}}}],["title",{"_index":225,"title":{},"body":{"classes/AuthorsResolver.html":{},"classes/Post.html":{}}}],["token",{"_index":70,"title":{},"body":{"controllers/AppController.html":{}}}],["touch",{"_index":535,"title":{},"body":{"index.html":{}}}],["transform(doc",{"_index":378,"title":{},"body":{"classes/PostMedias.html":{}}}],["transport",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["transport.nats",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["true",{"_index":174,"title":{},"body":{"modules/AppModule.html":{},"classes/Author.html":{},"classes/Post.html":{},"injectables/PostMediaService.html":{}}}],["true,tojson",{"_index":377,"title":{},"body":{"classes/PostMedias.html":{}}}],["try",{"_index":270,"title":{},"body":{"injectables/ImageUploadService.html":{},"injectables/PostMediaService.html":{},"controllers/s3UploadController.html":{},"injectables/s3UploadService.html":{}}}],["twitter",{"_index":540,"title":{},"body":{"index.html":{}}}],["type",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"classes/Author.html":{},"classes/AuthorsResolver.html":{},"injectables/ImageUploadService.html":{},"injectables/JwtStrategy.html":{},"classes/Post.html":{},"injectables/PostMediaService.html":{},"classes/PostMedias.html":{},"classes/S3Uploads.html":{},"coverage.html":{},"classes/createS3Dto.html":{},"controllers/s3UploadController.html":{},"classes/s3UploadInput.html":{},"classes/s3UploadResolver.html":{},"injectables/s3UploadService.html":{},"classes/s3UploadType.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":681,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types/passport",{"_index":462,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":499,"title":{},"body":{"index.html":{}}}],["undefined",{"_index":364,"title":{},"body":{"classes/PostMedias.html":{},"classes/S3Uploads.html":{},"controllers/s3UploadController.html":{}}}],["unit",{"_index":514,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":39,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthorsResolver.html":{},"injectables/ImageUploadService.html":{},"injectables/PostMediaService.html":{},"controllers/s3UploadController.html":{},"classes/s3UploadResolver.html":{}}}],["unlicensed",{"_index":552,"title":{},"body":{"properties.html":{}}}],["updatepostid",{"_index":328,"title":{},"body":{"injectables/PostMediaService.html":{}}}],["updatepostid(resourceid",{"_index":338,"title":{},"body":{"injectables/PostMediaService.html":{}}}],["upload",{"_index":230,"title":{},"body":{"injectables/ImageUploadService.html":{},"dependencies.html":{},"controllers/s3UploadController.html":{},"classes/s3UploadResolver.html":{}}}],["upload')@useinterceptors(undefined",{"_index":575,"title":{},"body":{"controllers/s3UploadController.html":{}}}],["upload(@uploadedfile",{"_index":602,"title":{},"body":{"controllers/s3UploadController.html":{}}}],["upload(file",{"_index":565,"title":{},"body":{"controllers/s3UploadController.html":{}}}],["uploadedfile",{"_index":584,"title":{},"body":{"controllers/s3UploadController.html":{}}}],["uploadedfiles",{"_index":256,"title":{},"body":{"injectables/ImageUploadService.html":{},"controllers/s3UploadController.html":{},"injectables/s3UploadService.html":{}}}],["uploadfile",{"_index":556,"title":{},"body":{"controllers/s3UploadController.html":{}}}],["uploadfile(files",{"_index":570,"title":{},"body":{"controllers/s3UploadController.html":{}}}],["uploadfilegraphql",{"_index":629,"title":{},"body":{"injectables/s3UploadService.html":{}}}],["uploadfilegraphql(fileuploaded",{"_index":636,"title":{},"body":{"injectables/s3UploadService.html":{}}}],["uploadfilerestapi",{"_index":630,"title":{},"body":{"injectables/s3UploadService.html":{}}}],["uploadfilerestapi(fileuploaded",{"_index":639,"title":{},"body":{"injectables/s3UploadService.html":{}}}],["uploadingtos3",{"_index":647,"title":{},"body":{"injectables/s3UploadService.html":{}}}],["uploadmultiplefile",{"_index":557,"title":{},"body":{"controllers/s3UploadController.html":{}}}],["uploadmultiplefile(files",{"_index":573,"title":{},"body":{"controllers/s3UploadController.html":{}}}],["uploadpath",{"_index":699,"title":{},"body":{"miscellaneous/variables.html":{}}}],["uploadsinglefile",{"_index":558,"title":{},"body":{"controllers/s3UploadController.html":{}}}],["uploadsinglefile(@uploadedfile",{"_index":608,"title":{},"body":{"controllers/s3UploadController.html":{}}}],["uploadsinglefile(file",{"_index":577,"title":{},"body":{"controllers/s3UploadController.html":{}}}],["uri",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["url",{"_index":604,"title":{},"body":{"controllers/s3UploadController.html":{}}}],["urls",{"_index":274,"title":{},"body":{"injectables/ImageUploadService.html":{},"controllers/s3UploadController.html":{}}}],["usefactory",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["useguards",{"_index":585,"title":{},"body":{"controllers/s3UploadController.html":{}}}],["useguards(jwtauthguard",{"_index":599,"title":{},"body":{"controllers/s3UploadController.html":{}}}],["useguards(jwtauthguard)@post('do",{"_index":563,"title":{},"body":{"controllers/s3UploadController.html":{}}}],["useguards(jwtauthguard)@post('upload",{"_index":566,"title":{},"body":{"controllers/s3UploadController.html":{}}}],["useinterceptors",{"_index":586,"title":{},"body":{"controllers/s3UploadController.html":{}}}],["useinterceptors(fileinterceptor('file",{"_index":601,"title":{},"body":{"controllers/s3UploadController.html":{}}}],["useinterceptors(filesinterceptor('files",{"_index":596,"title":{},"body":{"controllers/s3UploadController.html":{}}}],["user",{"_index":603,"title":{},"body":{"controllers/s3UploadController.html":{}}}],["user.email",{"_index":606,"title":{},"body":{"controllers/s3UploadController.html":{}}}],["user.id",{"_index":605,"title":{},"body":{"controllers/s3UploadController.html":{}}}],["usercreated",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"controllers/s3UploadController.html":{}}}],["usercreated(data",{"_index":41,"title":{},"body":{"controllers/AppController.html":{}}}],["usercreated(undefined",{"_index":581,"title":{},"body":{"controllers/s3UploadController.html":{}}}],["uuid",{"_index":264,"title":{},"body":{"injectables/ImageUploadService.html":{},"injectables/s3UploadService.html":{}}}],["uuid()}${extname(file.originalname",{"_index":715,"title":{},"body":{"miscellaneous/variables.html":{}}}],["uuidv4",{"_index":257,"title":{},"body":{"injectables/ImageUploadService.html":{},"injectables/s3UploadService.html":{}}}],["v4",{"_index":263,"title":{},"body":{"injectables/ImageUploadService.html":{},"injectables/s3UploadService.html":{}}}],["validate",{"_index":299,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(validationpayload",{"_index":302,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validationpayload",{"_index":305,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validator",{"_index":450,"title":{},"body":{"classes/createS3Dto.html":{},"dependencies.html":{},"classes/s3UploadInput.html":{},"classes/s3UploadType.html":{}}}],["value",{"_index":243,"title":{},"body":{"injectables/ImageUploadService.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":413,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":685,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":550,"title":{},"body":{"properties.html":{}}}],["votes",{"_index":322,"title":{},"body":{"classes/Post.html":{}}}],["watch",{"_index":509,"title":{},"body":{"index.html":{}}}],["website",{"_index":538,"title":{},"body":{"index.html":{}}}],["world",{"_index":187,"title":{},"body":{"injectables/AppService.html":{}}}],["you'd",{"_index":530,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                accumulate\n                            \n                            \n                                getHello\n                            \n                            \n                                getM2\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                onApplicationBootstrap\n                            \n                            \n                                userCreated\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        accumulate\n                        \n                    \n                \n            \n            \n                \naccumulate(data: number[], options)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @MessagePattern({cmd: 'sum'})\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getM2\n                        \n                    \n                \n            \n            \n                \ngetM2()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/m2')\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(body)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/login')\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \n                    \n                    onApplicationBootstrap()\n                \n            \n\n\n            \n                \n                    Defined in src/app.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userCreated\n                        \n                    \n                \n            \n            \n                \nuserCreated(data: Record)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @EventPattern('user_created')\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Inject, Post } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport {\n  ClientProxy,\n  EventPattern,\n  MessagePattern,\n} from '@nestjs/microservices';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(\n    private readonly appService: AppService,\n    @Inject('NATS-SERVER-CLIENT') private natsServerClient: ClientProxy,\n    private jwtService: JwtService,\n  ) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n\n  @Post('/login')\n  async login(@Body() body) {\n    const { token } = body;\n    const payload = this.jwtService.verify(token);\n    return payload;\n  }\n\n  @Get('/m2')\n  getM2() {\n    return 'M@';\n  }\n\n  @MessagePattern({ cmd: 'sum' })\n  accumulate(data: number[], options): string {\n    console.log('Command Executed', JSON.stringify(data));\n    return \"File service cmd: sum called\";\n  }\n\n  @EventPattern('user_created')\n  userCreated(data: Record): number {\n    console.log('user created!');\n    console.log(data);\n    return 10;\n  }\n\n  async onApplicationBootstrap() {\n    await this.natsServerClient.connect();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAppService\n\nAppService\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nImageUploadService\n\nImageUploadService\n\nAppModule -->\n\nImageUploadService->AppModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAppModule -->\n\nJwtStrategy->AppModule\n\n\n\n\n\nPostMediaService\n\nPostMediaService\n\nAppModule -->\n\nPostMediaService->AppModule\n\n\n\n\n\ns3UploadService\n\ns3UploadService\n\nAppModule -->\n\ns3UploadService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            ImageUploadService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            PostMediaService\n                        \n                        \n                            s3UploadService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                        \n                            s3UploadController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { ApolloDriver, ApolloDriverConfig } from '@nestjs/apollo';\nimport { Module } from '@nestjs/common';\nimport AWS from 'aws-sdk';\nimport { S3Module } from 'nestjs-s3';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { GraphQLModule } from '@nestjs/graphql';\nimport { JwtModule } from '@nestjs/jwt';\nimport { ClientsModule, Transport } from '@nestjs/microservices';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { join } from 'path';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport Controllers from './controllers';\nimport { schemas } from './db/schemas';\nimport resolvers from './graphql/resolvers';\nimport { allServices } from './services';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { JwtStrategy } from './stratagies/jwt.strategy';\n\nconst graphqlPath = process.env.PREFIX\n  ? `/${process.env.PREFIX || ''}/graphql`\n  : '/graphql';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot(),\n    ClientsModule.registerAsync([\n      {\n        name: 'NATS-SERVER-CLIENT',\n        imports: [ConfigModule],\n        useFactory: async (configService: ConfigService) => ({\n          name: 'NATS-SERVER-CLIENT',\n          transport: Transport.NATS,\n          options: {\n            servers: [configService.get('NATS_CONNECTION_URL')],\n            queue: 'cats_queue',\n          },\n        }),\n        inject: [ConfigService],\n      },\n    ]),\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        secret: configService.get('JWT_SECRET'),\n        signOptions: { expiresIn: '60s' },\n      }),\n      inject: [ConfigService],\n    }),\n    MongooseModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        uri: configService.get('MONGO_CONNECTION_URI'),\n      }),\n      inject: [ConfigService],\n    }),\n    S3Module.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        config: {\n          credentials: {\n            accessKeyId: configService.get('AWS_ACCESS_KEY_ID'),\n            secretAccessKey: configService.get('AWS_SECRET_ACCESS_KEY'),\n          },\n          endpoint: new AWS.Endpoint(configService.get('DO_SPACES_ENDPOINT')),\n        },\n      }),\n      inject: [ConfigService],\n    }),\n\n    MongooseModule.forFeature(schemas),\n    GraphQLModule.forRoot({\n      driver: ApolloDriver,\n      autoSchemaFile: join(process.cwd(), 'src/schema.gql'),\n      path: graphqlPath,\n      introspection: true,\n      playground: true,\n      debug: true,\n    }),\n    ServeStaticModule.forRoot({\n      rootPath: join(__dirname, '..', 'public'),\n      serveRoot: `/${process.env.PREFIX || ''}`,\n    }),\n  ],\n  controllers: [AppController, ...Controllers],\n  providers: [AppService, ...resolvers, ...allServices, JwtStrategy],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Author.html":{"url":"classes/Author.html","title":"class - Author","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Author\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/graphql/models/author.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                firstName\n                            \n                            \n                                id\n                            \n                            \n                                    Optional\n                                lastName\n                            \n                            \n                                posts\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/graphql/models/author.model.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/graphql/models/author.model.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/graphql/models/author.model.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/graphql/models/author.model.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, Int, ObjectType } from '@nestjs/graphql';\nimport { Post } from './post.model';\n\n@ObjectType()\nexport class Author {\n  @Field(() => Int)\n  id: number;\n\n  @Field({ nullable: true })\n  firstName?: string;\n\n  @Field({ nullable: true })\n  lastName?: string;\n\n  @Field(() => [Post])\n  posts: Post[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthorsResolver.html":{"url":"classes/AuthorsResolver.html","title":"class - AuthorsResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthorsResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/graphql/resolvers/authors.resolver.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                author\n                            \n                            \n                                    Async\n                                posts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        author\n                        \n                    \n                \n            \n            \n                \n                    \n                    author(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined)\n                \n            \n\n            \n                \n                    Defined in src/graphql/resolvers/authors.resolver.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        posts\n                        \n                    \n                \n            \n            \n                \n                    \n                    posts(author: Author)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ResolveField()\n                \n            \n\n            \n                \n                    Defined in src/graphql/resolvers/authors.resolver.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    author\n                                    \n                                                Author\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Args,\n  Int,\n  Parent,\n  Query,\n  ResolveField,\n  Resolver,\n} from '@nestjs/graphql';\nimport { Author } from '../models/author.model';\n\n@Resolver(() => Author)\nexport class AuthorsResolver {\n  @Query(() => Author)\n  async author(@Args('id', { type: () => Int }) id: number): Promise {\n    return {\n      id,\n      firstName: 'Saf',\n      posts: [],\n    };\n  }\n\n  @ResolveField()\n  async posts(@Parent() author: Author) {\n    const { id } = author;\n    return [\n      {\n        id: 21,\n        title: 'SAtish',\n      },\n      {\n        id: 22,\n        title: 'SAtish22',\n      },\n    ];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ImageUploadService.html":{"url":"injectables/ImageUploadService.html","title":"injectable - ImageUploadService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ImageUploadService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/DOSpaceUpload.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                upload\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                fileupload\n                            \n                            \n                                    Async\n                                getUrls\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(s3: S3, postMediaService: PostMediaService)\n                    \n                \n                        \n                            \n                                Defined in src/services/DOSpaceUpload.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        s3\n                                                  \n                                                        \n                                                                    S3\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postMediaService\n                                                  \n                                                        \n                                                                        PostMediaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        fileupload\n                        \n                    \n                \n            \n            \n                \n                    \n                    fileupload(req, res)\n                \n            \n\n\n            \n                \n                    Defined in src/services/DOSpaceUpload.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUrls\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUrls(files: any)\n                \n            \n\n\n            \n                \n                    Defined in src/services/DOSpaceUpload.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        upload\n                        \n                    \n                \n            \n                \n                    \n                        Default value : multer({\n    storage: multerS3({\n      s3: this.s3,\n      bucket: 'enochstaging',\n      acl: 'public-read',\n      key: function(request, file, cb) {\n        const filepath = `UploadedFiles` + '/' + uuidv4() + file.originalname;\n        cb(null, filepath);\n      },\n    }),\n  }).array('upload', 10)\n                    \n                \n                    \n                        \n                                Defined in src/services/DOSpaceUpload.service.ts:14\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Req, Res, Injectable } from '@nestjs/common';\nimport multer from 'multer';\nconst multerS3 = require('multer-s3');\nimport { v4 as uuidv4 } from 'uuid';\nimport { InjectS3, S3 } from 'nestjs-s3';\nimport { PostMediaService } from './postMedia.service';\n\n@Injectable()\nexport class ImageUploadService {\n  constructor(\n    @InjectS3() private readonly s3: S3,\n    private readonly postMediaService: PostMediaService,\n  ) {}\n  upload = multer({\n    storage: multerS3({\n      s3: this.s3,\n      bucket: 'enochstaging',\n      acl: 'public-read',\n      key: function(request, file, cb) {\n        const filepath = `UploadedFiles` + '/' + uuidv4() + file.originalname;\n        cb(null, filepath);\n      },\n    }),\n  }).array('upload', 10);\n\n  async getUrls(files: any) {\n    return files.map((file: any) => {\n      return `${file?.location}`;\n    });\n  }\n\n  async fileupload(@Req() req, @Res() res) {\n    try {\n      this.upload(req, res, async error => {\n        if (error) {\n          return res.status(404).json(`Failed to upload  file: ${error}`);\n        }\n        const urls = await this.getUrls(req.files);\n        const media = await this.postMediaService.saveTodb({\n          createdBy: req?.user?.id,\n          CreatorsEmail: req?.user?.email,\n          multerS3Object: req?.files,\n          filesUrl: urls,\n        });\n        return res.status(201).json({\n          media: media.multerS3Object,\n          resourceId: media._id,\n        });\n      });\n    } catch (error) {\n      return res.status(500).json(`Failed to upload  file: ${error}`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/JwtAuthGuard.html":{"url":"classes/JwtAuthGuard.html","title":"class - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guards/jwt-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { AuthGuard } from '@nestjs/passport';\n\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stratagies/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/stratagies/jwt.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(validationPayload: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/stratagies/jwt.strategy.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validationPayload\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { email: string; sub: string; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtSecretRequestType } from '@nestjs/jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\n\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n\n    private readonly configService: ConfigService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: configService.get('JWT_SECRET'),\n    });\n  }\n\n  validate(validationPayload: { email: string; sub: string }) {\n    return validationPayload;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Post.html":{"url":"classes/Post.html","title":"class - Post","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/graphql/models/post.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                title\n                            \n                            \n                                    Optional\n                                votes\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/graphql/models/post.model.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/graphql/models/post.model.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        votes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/graphql/models/post.model.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, Int, ObjectType } from '@nestjs/graphql';\n\n@ObjectType()\nexport class Post {\n  @Field(() => Int)\n  id: number;\n\n  @Field()\n  title: string;\n\n  @Field(() => Int, { nullable: true })\n  votes?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostMediaService.html":{"url":"injectables/PostMediaService.html","title":"injectable - PostMediaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostMediaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/postMedia.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getUrls\n                            \n                            \n                                    Async\n                                saveTodb\n                            \n                            \n                                    Async\n                                updatePostId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postMediaModel: Model, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/services/postMedia.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postMediaModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUrls\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUrls(files: Array)\n                \n            \n\n\n            \n                \n                    Defined in src/services/postMedia.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveTodb\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveTodb(media: PostMedias)\n                \n            \n\n\n            \n                \n                    Defined in src/services/postMedia.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    media\n                                    \n                                                PostMedias\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePostId\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePostId(resourceId: string, postId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/services/postMedia.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    resourceId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { ConfigService } from '@nestjs/config';\nimport {\n  PostMedias,\n  PostMediasDocument,\n} from 'src/db/schemas/s3-schema/postMedia';\n\n@Injectable()\nexport class PostMediaService {\n  constructor(\n    @InjectModel(PostMedias.name)\n    private postMediaModel: Model,\n    private readonly configService: ConfigService,\n  ) {}\n\n  async saveTodb(media: PostMedias) {\n    try {\n      const newMedia = new this.postMediaModel(media);\n      return await newMedia.save();\n    } catch {\n      throw new Error(\"Please reupload the file can't store file on out db\");\n    }\n  }\n\n  async updatePostId(resourceId: string, postId: string) {\n    return await this.postMediaModel.findByIdAndUpdate(\n      resourceId,\n      { postId },\n      { new: true },\n    );\n  }\n\n  async getUrls(files: Array) {\n    return files.map(file => {\n      return `${this.configService.get('FILE_URL')}/${file.filename}`;\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostMedias.html":{"url":"classes/PostMedias.html","title":"class - PostMedias","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostMedias\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/db/schemas/s3-schema/postMedia.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdBy\n                            \n                            \n                                CreatorsEmail\n                            \n                            \n                                    Optional\n                                filesUrl\n                            \n                            \n                                    Optional\n                                fileUrl\n                            \n                            \n                                    Optional\n                                multerObject\n                            \n                            \n                                    Optional\n                                multerS3Object\n                            \n                            \n                                    Optional\n                                postId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        createdBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :     mongoose.Schema.Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/db/schemas/s3-schema/postMedia.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CreatorsEmail\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/db/schemas/s3-schema/postMedia.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        filesUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/db/schemas/s3-schema/postMedia.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        fileUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/db/schemas/s3-schema/postMedia.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        multerObject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/db/schemas/s3-schema/postMedia.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        multerS3Object\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/db/schemas/s3-schema/postMedia.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        postId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/db/schemas/s3-schema/postMedia.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\nimport * as mongoose from 'mongoose';\n\nexport type PostMediasDocument = PostMedias & Document;\n\n@Schema({ timestamps: true,toJSON: {\n  transform(doc, ret) {\n    ret.id = ret._id;\n    delete ret._id;\n    delete ret.__v;\n  }\n} })\nexport class PostMedias {\n  @Prop({ type: mongoose.Schema.Types.ObjectId })\n  createdBy: mongoose.Schema.Types.ObjectId;\n\n  @Prop()\n  CreatorsEmail: string;\n\n  @Prop({ type: mongoose.Schema.Types.ObjectId })\n  postId?: string;\n\n  @Prop({ type: [String] })\n  filesUrl?: Array;\n\n  @Prop({ type: String })\n  fileUrl?: string;\n\n  @Prop({\n    type: [\n      {\n        type: {\n          fieldname: String,\n          originalname: String,\n          encoding: String,\n          mimetype: String,\n          destination: String,\n          filename: String,\n          path: String,\n          Size: Number,\n        },\n      },\n    ],\n  })\n  multerObject?: Array;\n\n  @Prop({\n    type: [\n      {\n        type: {\n          fieldname: String,\n          originalname: String,\n          encoding: String,\n          mimetype: String,\n          bucket: String,\n          key: String,\n          size: Number,\n          acl: String,\n          contentType: String,\n          contentDisposition: String,\n          contentEncoding: String,\n          ContentEncoding: String,\n          storageClass: String,\n          serverSideEncryption: String,\n          metadata: String,\n          location:String\n        },\n      },\n    ],\n  })\n  multerS3Object?: Array;\n}\n\nexport const PostMediaSchema = SchemaFactory.createForClass(PostMedias);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/S3Uploads.html":{"url":"classes/S3Uploads.html","title":"class - S3Uploads","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  S3Uploads\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/db/schemas/s3-schema/S3Uploads.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                filesUrl\n                            \n                            \n                                fileUrl\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        filesUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/db/schemas/s3-schema/S3Uploads.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fileUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/db/schemas/s3-schema/S3Uploads.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\nexport type S3UploadsDocument = S3Uploads & Document;\n\n@Schema()\nexport class S3Uploads {\n  @Prop()\n  fileUrl: string;\n\n  @Prop({ type: [String] })\n  filesUrl: Array;\n}\n\nexport const S3UploadsSchema = SchemaFactory.createForClass(S3Uploads);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/app.module.ts\n            \n            variable\n            graphqlPath\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/config.ts\n            \n            variable\n            natsHost\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/controllers/index.ts\n            \n            variable\n            Controllers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/controllers/multer.options.ts\n            \n            variable\n            multerConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/controllers/multer.options.ts\n            \n            variable\n            multerOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/controllers/s3Upload.controller.ts\n            \n            controller\n            s3UploadController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/db/schemas/index.ts\n            \n            variable\n            schemas\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/db/schemas/s3-schema/S3Uploads.ts\n            \n            class\n            S3Uploads\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/db/schemas/s3-schema/S3Uploads.ts\n            \n            variable\n            S3UploadsSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/db/schemas/s3-schema/postMedia.ts\n            \n            class\n            PostMedias\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/db/schemas/s3-schema/postMedia.ts\n            \n            variable\n            PostMediaSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/graphql/Dto/createS3Dto.ts\n            \n            class\n            createS3Dto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/graphql/Dto/createS3Dto.ts\n            \n            class\n            s3UploadInput\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/graphql/Dto/createS3Dto.ts\n            \n            class\n            s3UploadType\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/graphql/models/author.model.ts\n            \n            class\n            Author\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/graphql/models/post.model.ts\n            \n            class\n            Post\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/graphql/resolvers/authors.resolver.ts\n            \n            class\n            AuthorsResolver\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/graphql/resolvers/index.ts\n            \n            variable\n            resolvers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/graphql/resolvers/s3Upload.resolver.ts\n            \n            class\n            s3UploadResolver\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/guards/jwt-auth.guard.ts\n            \n            class\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/services/DOSpaceUpload.service.ts\n            \n            injectable\n            ImageUploadService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/services/DOSpaceUpload.service.ts\n            \n            variable\n            multerS3\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/services/index.ts\n            \n            variable\n            allServices\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/services/postMedia.service.ts\n            \n            injectable\n            PostMediaService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/services/s3Upload.service.ts\n            \n            injectable\n            s3UploadService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/stratagies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/createS3Dto.html":{"url":"classes/createS3Dto.html","title":"class - createS3Dto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  createS3Dto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/graphql/Dto/createS3Dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                    Optional\n                                image\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/graphql/Dto/createS3Dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/graphql/Dto/createS3Dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ObjectType, Field, Int, ID, InputType } from '@nestjs/graphql';\n\nimport { IsNotEmpty, IsString } from 'class-validator';\n\nexport class createS3Dto {\n  @IsString()\n  @IsNotEmpty()\n  description: string;\n\n  image?: string;\n}\n\n@ObjectType()\nexport class s3UploadType {\n  @Field(() => ID)\n  readonly id?: string;\n  @Field()\n  readonly fileUrl: string;\n}\n\n@InputType()\nexport class s3UploadInput {\n  @Field()\n  readonly file: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/apollo : ^10.0.6\n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/config : ^1.2.0\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/graphql : ^10.0.6\n        \n            @nestjs/jwt : ^8.0.0\n        \n            @nestjs/microservices : ^8.3.1\n        \n            @nestjs/mongoose : ^9.0.2\n        \n            @nestjs/passport : ^8.2.1\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/serve-static : ^2.2.2\n        \n            @types/passport-local : ^1.0.34\n        \n            apollo-server-express : ^3.6.3\n        \n            aws-sdk : ^2.1135.0\n        \n            class-validator : ^0.13.2\n        \n            graphql : ^16.3.0\n        \n            graphql-upload : ^13.0.0\n        \n            mongoose : ^6.2.4\n        \n            multer : ^1.4.4\n        \n            multer-s3 : ^2.10.0\n        \n            nats : ^2.6.1\n        \n            nestjs-s3 : ^1.0.1\n        \n            passport : ^0.5.2\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAppService\n\nAppService\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nImageUploadService\n\nImageUploadService\n\nAppModule -->\n\nImageUploadService->AppModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAppModule -->\n\nJwtStrategy->AppModule\n\n\n\n\n\nPostMediaService\n\nPostMediaService\n\nAppModule -->\n\nPostMediaService->AppModule\n\n\n\n\n\ns3UploadService\n\ns3UploadService\n\nAppModule -->\n\ns3UploadService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    10 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : elementzerolabs\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/s3UploadController.html":{"url":"controllers/s3UploadController.html","title":"controller - s3UploadController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  s3UploadController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/controllers/s3Upload.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                upload\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                upload\n                            \n                            \n                                    Async\n                                uploadFile\n                            \n                            \n                                    Async\n                                uploadMultipleFile\n                            \n                            \n                                uploadSingleFile\n                            \n                            \n                                    Async\n                                userCreated\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(file: Express.Multer.File, request, response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('do-m-upload')\n                \n            \n\n            \n                \n                    Defined in src/controllers/s3Upload.controller.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        upload\n                        \n                    \n                \n            \n            \n                \n                    \n                    upload(file, undefined: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('upload-single-with-static-path')@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/controllers/s3Upload.controller.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadFile(files: Array, undefined: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('upload-multiple-with-static-path')@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/controllers/s3Upload.controller.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadMultipleFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadMultipleFile(files: Array)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('multi-Upload')@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/controllers/s3Upload.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uploadSingleFile\n                        \n                    \n                \n            \n            \n                \nuploadSingleFile(file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('single-file')@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/controllers/s3Upload.controller.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        userCreated\n                        \n                    \n                \n            \n            \n                \n                    \n                    userCreated(undefined)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @EventPattern('add_post_id')\n                \n            \n\n            \n                \n                    Defined in src/controllers/s3Upload.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Req,\n  UploadedFile,\n  UploadedFiles,\n  UseGuards,\n  UseInterceptors,\n  Inject,\n  Res,\n} from '@nestjs/common';\nimport { FileInterceptor, FilesInterceptor } from '@nestjs/platform-express';\nimport {\n  ClientProxy,\n  EventPattern,\n  MessagePattern,\n} from '@nestjs/microservices';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtAuthGuard } from 'src/guards/jwt-auth.guard';\nimport { s3UploadService } from '../services/s3Upload.service';\nimport { multerOptions } from './multer.options';\nimport { PostMediaService } from 'src/services/postMedia.service';\nimport { ImageUploadService } from 'src/services/DOSpaceUpload.service';\n\n@Controller('upload')\nexport class s3UploadController {\n  constructor(\n    private readonly s3UploadService: s3UploadService,\n    private readonly configService: ConfigService,\n    private readonly postMediaService: PostMediaService,\n    private readonly imageUploadService: ImageUploadService,\n    @Inject('NATS-SERVER-CLIENT') private natsServerClient: ClientProxy,\n  ) {}\n\n  @EventPattern('add_post_id')\n  async userCreated({ resourceId, postId }) {\n    return await this.postMediaService.updatePostId(resourceId, postId);\n  }\n\n  @Post('multi-Upload')\n  @UseInterceptors(FilesInterceptor('files'))\n  async uploadMultipleFile(\n    @UploadedFiles() files: Array,\n  ): Promise {\n    const result = await this.s3UploadService.multiFileUploadRestApi(files);\n    return result;\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Post('upload-single-with-static-path')\n  @UseInterceptors(FileInterceptor('file', multerOptions))\n  async upload(@UploadedFile() file, @Req() { user }: any) {\n    const url = `${this.configService.get('FILE_URL')}/${file.filename}`;\n    const media = await this.postMediaService.saveTodb({\n      createdBy: user.id,\n      CreatorsEmail: user.email,\n      multerObject: file,\n      fileUrl: url,\n    });\n    return { url, resourceId: media._id };\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Post('upload-multiple-with-static-path')\n  @UseInterceptors(FilesInterceptor('files', 5, multerOptions))\n  async uploadFile(\n    @UploadedFiles() files: Array,\n    @Req() { user }: any,\n  ) {\n    const urls = await this.postMediaService.getUrls(files);\n    const media = await this.postMediaService.saveTodb({\n      createdBy: user.id,\n      CreatorsEmail: user.email,\n      multerObject: files,\n      filesUrl: urls,\n    });\n    return { urls, resourceId: media._id };\n  }\n\n  @Post('single-file')\n  @UseInterceptors(FileInterceptor('file'))\n  uploadSingleFile(@UploadedFile() file: Express.Multer.File) {\n    const result = this.s3UploadService.uploadFileRestApi(file);\n    return result;\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Post('do-m-upload')\n  async create(\n    @UploadedFile() file: Express.Multer.File,\n    @Req() request,\n    @Res() response,\n  ) {\n    try {\n      await this.imageUploadService.fileupload(request, response);\n    } catch (error) {\n      return response\n        .status(500)\n        .json(`Failed to upload image file: ${error.message}`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/s3UploadInput.html":{"url":"classes/s3UploadInput.html","title":"class - s3UploadInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  s3UploadInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/graphql/Dto/createS3Dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                file\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        file\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/graphql/Dto/createS3Dto.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ObjectType, Field, Int, ID, InputType } from '@nestjs/graphql';\n\nimport { IsNotEmpty, IsString } from 'class-validator';\n\nexport class createS3Dto {\n  @IsString()\n  @IsNotEmpty()\n  description: string;\n\n  image?: string;\n}\n\n@ObjectType()\nexport class s3UploadType {\n  @Field(() => ID)\n  readonly id?: string;\n  @Field()\n  readonly fileUrl: string;\n}\n\n@InputType()\nexport class s3UploadInput {\n  @Field()\n  readonly file: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/s3UploadResolver.html":{"url":"classes/s3UploadResolver.html","title":"class - s3UploadResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  s3UploadResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/graphql/resolvers/s3Upload.resolver.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                FileUploadService\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(s3UploadService: s3UploadService)\n                    \n                \n                        \n                            \n                                Defined in src/graphql/resolvers/s3Upload.resolver.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        s3UploadService\n                                                  \n                                                        \n                                                                        s3UploadService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        FileUploadService\n                        \n                    \n                \n            \n            \n                \n                    \n                    FileUploadService(file: FileUpload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined)\n                \n            \n\n            \n                \n                    Defined in src/graphql/resolvers/s3Upload.resolver.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            FileUpload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Args, Mutation, Query, Resolver } from '@nestjs/graphql';\nimport { FileUpload, GraphQLUpload } from 'graphql-upload';\nimport { s3UploadService } from 'src/services/s3Upload.service';\n\n@Resolver()\nexport class s3UploadResolver {\n  constructor(private readonly s3UploadService: s3UploadService) {}\n  @Mutation(() => String)\n  async FileUploadService(\n    @Args('file', { type: () => GraphQLUpload }) file: FileUpload,\n  ) {\n    const result = this.s3UploadService.uploadFileGraphql(file);\n\n    return result;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/s3UploadService.html":{"url":"injectables/s3UploadService.html","title":"injectable - s3UploadService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  s3UploadService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/s3Upload.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                multiFileUploadRestApi\n                            \n                            \n                                    Async\n                                uploadFileGraphql\n                            \n                            \n                                    Async\n                                uploadFileRestApi\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(S3UploadsModel: Model, configService: ConfigService, s3: S3)\n                    \n                \n                        \n                            \n                                Defined in src/services/s3Upload.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        S3UploadsModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        s3\n                                                  \n                                                        \n                                                                    S3\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        multiFileUploadRestApi\n                        \n                    \n                \n            \n            \n                \n                    \n                    multiFileUploadRestApi(files)\n                \n            \n\n\n            \n                \n                    Defined in src/services/s3Upload.service.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadFileGraphql\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadFileGraphql(fileUploaded)\n                \n            \n\n\n            \n                \n                    Defined in src/services/s3Upload.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileUploaded\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadFileRestApi\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadFileRestApi(fileUploaded)\n                \n            \n\n\n            \n                \n                    Defined in src/services/s3Upload.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileUploaded\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { InjectS3, S3 } from 'nestjs-s3';\nimport { Model } from 'mongoose';\nimport path = require('path');\nimport { v4 as uuidv4 } from 'uuid';\nimport { ConfigService } from '@nestjs/config';\nimport {\n  S3Uploads,\n  S3UploadsDocument,\n} from 'src/db/schemas/s3-schema/S3Uploads';\nimport { ERROR_MESSAGES, CONSTANT_VARIABLE } from '../constant.json';\n\n@Injectable()\nexport class s3UploadService {\n  constructor(\n    @InjectModel('S3Uploads') private S3UploadsModel: Model,\n    private readonly configService: ConfigService,\n    @InjectS3() private readonly s3: S3,\n  ) {}\n\n  async uploadFileGraphql(fileUploaded): Promise {\n    let uploadingToS3;\n\n    const { createReadStream, filename } = await fileUploaded;\n    const fileExtentionType = path.extname(filename);\n    const documentname = path.basename(filename, fileExtentionType);\n\n    const filepath = `UploadedFiles` + '/' + uuidv4() + filename;\n    const bucketName = this.configService.get('AWS_BUCKET');\n    const params = {\n      Bucket: bucketName,\n      Key: filepath,\n      Body: createReadStream(),\n    };\n\n    try {\n      uploadingToS3 = new Promise((resolve, reject) => {\n        this.s3.upload(params, function(err, data) {\n          if (err) {\n            reject(err);\n          }\n          return resolve(data);\n        });\n      });\n    } catch (error) {\n      throw new Error(ERROR_MESSAGES.ERROR_FILE_UPLOAD);\n    }\n    const response = await uploadingToS3;\n\n    try {\n      if (response.Location) {\n        this.S3UploadsModel.create({ fileUrl: response.Location });\n      }\n    } catch (error) {\n      throw new Error(ERROR_MESSAGES.ERROR_INSERTING_TO_DB);\n    }\n    return response;\n  }\n\n  async uploadFileRestApi(fileUploaded): Promise {\n    const bucketName = this.configService.get('AWS_BUCKET');\n    let uploadingToS3;\n    const { buffer, originalname, ...rest } = await fileUploaded;\n    console.log('originalname,rest', originalname, rest);\n    const filepath = `UploadedFiles` + '/' + uuidv4() + originalname;\n    const params = {\n      Bucket: bucketName,\n      Key: filepath,\n      Body: buffer,\n      ACL: 'public-read',\n    };\n\n    try {\n      uploadingToS3 = new Promise((resolve, reject) => {\n        this.s3.upload(params, function(err, data) {\n          if (err) {\n            reject(err);\n          }\n          console.log('data', data);\n          return resolve(data);\n        });\n      });\n    } catch (error) {\n      throw new Error(ERROR_MESSAGES.ERROR_FILE_UPLOAD);\n    }\n    const response = await uploadingToS3;\n\n    try {\n      if (response.Location) {\n        this.S3UploadsModel.create({ fileUrl: response.Location });\n      }\n    } catch (error) {\n      throw new Error(ERROR_MESSAGES.ERROR_INSERTING_TO_DB);\n    }\n    return response;\n  }\n\n  async multiFileUploadRestApi(files): Promise {\n    const perFileUpload = async fileUploaded => {\n      let uploadingToS3;\n      const { buffer, originalname } = await fileUploaded;\n      const filepath = `UploadedFiles` + '/' + uuidv4() + originalname;\n      const params = {\n        Bucket: CONSTANT_VARIABLE.AWS_BUCKET,\n        Key: filepath,\n        Body: buffer,\n      };\n      try {\n        uploadingToS3 = new Promise((resolve, reject) => {\n          this.s3.upload(params, function(err, data) {\n            if (err) {\n              reject(err);\n            }\n            return resolve(data.Location);\n          });\n        });\n      } catch (error) {\n        throw new Error(ERROR_MESSAGES.ERROR_FILE_UPLOAD);\n      }\n      const fileUrl = await uploadingToS3;\n      return fileUrl;\n    };\n\n    const perFileUploadpromises = files.map(async file => {\n      return await perFileUpload(file);\n    });\n    const allFileUpload = await Promise.all(perFileUploadpromises);\n    try {\n      this.S3UploadsModel.create({ filesUrl: allFileUpload });\n    } catch (error) {\n      throw new Error(ERROR_MESSAGES.ERROR_INSERTING_TO_DB);\n    }\n    return allFileUpload;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/s3UploadType.html":{"url":"classes/s3UploadType.html","title":"class - s3UploadType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  s3UploadType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/graphql/Dto/createS3Dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                fileUrl\n                            \n                            \n                                    Readonly\n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        fileUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/graphql/Dto/createS3Dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/graphql/Dto/createS3Dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ObjectType, Field, Int, ID, InputType } from '@nestjs/graphql';\n\nimport { IsNotEmpty, IsString } from 'class-validator';\n\nexport class createS3Dto {\n  @IsString()\n  @IsNotEmpty()\n  description: string;\n\n  image?: string;\n}\n\n@ObjectType()\nexport class s3UploadType {\n  @Field(() => ID)\n  readonly id?: string;\n  @Field()\n  readonly fileUrl: string;\n}\n\n@InputType()\nexport class s3UploadInput {\n  @Field()\n  readonly file: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PostMediasDocument   (src/.../postMedia.ts)\n                        \n                        \n                            S3UploadsDocument   (src/.../S3Uploads.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/db/schemas/s3-schema/postMedia.ts\n    \n    \n        \n            \n                \n                    \n                    PostMediasDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/db/schemas/s3-schema/S3Uploads.ts\n    \n    \n        \n            \n                \n                    \n                    S3UploadsDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            allServices   (src/.../index.ts)\n                        \n                        \n                            Controllers   (src/.../index.ts)\n                        \n                        \n                            graphqlPath   (src/.../app.module.ts)\n                        \n                        \n                            multerConfig   (src/.../multer.options.ts)\n                        \n                        \n                            multerOptions   (src/.../multer.options.ts)\n                        \n                        \n                            multerS3   (src/.../DOSpaceUpload.service.ts)\n                        \n                        \n                            natsHost   (src/.../config.ts)\n                        \n                        \n                            PostMediaSchema   (src/.../postMedia.ts)\n                        \n                        \n                            resolvers   (src/.../index.ts)\n                        \n                        \n                            S3UploadsSchema   (src/.../S3Uploads.ts)\n                        \n                        \n                            schemas   (src/.../index.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/services/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        allServices\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n  s3UploadService,\n  PostMediaService,\n  ImageUploadService,\n]\n                    \n                \n\n\n        \n    \n\n    src/controllers/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Controllers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [s3UploadController]\n                    \n                \n\n\n        \n    \n\n    src/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        graphqlPath\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.PREFIX\n  ? `/${process.env.PREFIX || ''}/graphql`\n  : '/graphql'\n                    \n                \n\n\n        \n    \n\n    src/controllers/multer.options.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        multerConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  dest: 'public/images',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        multerOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  // Enable file size limits\n  // limits: {\n  //   fileSize: +process.env.MAX_FILE_SIZE,\n  // },\n\n  storage: diskStorage({\n    destination: (req: any, file: any, cb: any) => {\n      const uploadPath = multerConfig.dest;\n      // Create folder if doesn't exist\n      if (!existsSync(uploadPath)) {\n        mkdirSync(uploadPath);\n      }\n      cb(null, uploadPath);\n    },\n    // File modification details\n    filename: (req: any, file: any, cb: any) => {\n      // Calling the callback passing the random name generated with the original extension name\n      cb(null, `${uuid()}${extname(file.originalname)}`);\n    },\n  }),\n}\n                    \n                \n\n\n        \n    \n\n    src/services/DOSpaceUpload.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        multerS3\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('multer-s3')\n                    \n                \n\n\n        \n    \n\n    src/config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        natsHost\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NATS_CONNECTION_URL\n                    \n                \n\n\n        \n    \n\n    src/db/schemas/s3-schema/postMedia.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PostMediaSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(PostMedias)\n                    \n                \n\n\n        \n    \n\n    src/graphql/resolvers/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        resolvers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [AuthorsResolver, s3UploadResolver]\n                    \n                \n\n\n        \n    \n\n    src/db/schemas/s3-schema/S3Uploads.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        S3UploadsSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(S3Uploads)\n                    \n                \n\n\n        \n    \n\n    src/db/schemas/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        schemas\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n  { name: S3Uploads.name, schema: S3UploadsSchema },\n  { name: PostMedias.name, schema: PostMediaSchema },\n]\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
