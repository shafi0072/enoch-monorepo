# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type ResourcesMetaDataMOdel {
  _id: ID
  fieldname: String
  originalname: String
  encoding: String
  mimetype: String
  bucket: String
  key: String
  size: Float
  acl: String
  contentType: String
  contentDisposition: String
  contentEncoding: String
  ContentEncoding: String
  storageClass: String
  serverSideEncryption: String
  metadata: String
  location: String
}

type CommunityModel {
  _id: String!
  communityName: String!
  communityDescription: String!
  followersCount: String!
}

type IndustryModel {
  _id: String!
  industryCategory: String!
}

type NewsChannelModel {
  _id: String!
  channelName: String!
  channelDescription: String!
}

type UserExperience {
  _id: ID!
  jobTitle: String
  employementType: String
  company: String
  location: String
  isCurrentlyWorking: Boolean
  startMonth: String
  startYear: String
  endMonth: String
  endYear: String
  industry: String
  description: String
}

type User {
  _id: String
  firstName: String
  lastName: String
  email: String!

  """Active screen of onboarding, null means Onboarding is completed"""
  activeOnBoardingScreen: OnBoardingScreen
  accountType: AccountType
  userId: String
  gender: Gender
  hereFor: ReasonHereFor
  relationshipStatus: RelationshipStatus
  dateOfBirth: String
  country: String
  bio: String
  website: String
  hideDateOfBirth: Boolean
  hideRelationshipStatus: Boolean
  hideHereFor: Boolean
  hideCountry: Boolean
  isHandlerVerified: Boolean
  isEmailVerified: Boolean
  hideGender: Boolean
  signUpType: SignUpType
  accessToken: String
  industryType: IndustryModel
  interests: [IndustryModel!]
  communities: [CommunityModel!]
  newsChannels: [NewsChannelModel!]
  followee: [User!]
  avatar: String
  username: String
  avatarTitle: String
  backgroundImage: String
  isAgreedToOnboardingTerms: Boolean
  selectedInterests: [String!]
  cardType: AvatarCardType
  isFollowing: Boolean
  isOnboardingCompleted: Boolean
  userJobExperience: [UserExperience!]
}

enum OnBoardingScreen {
  OnBoarding
  ChooseAccountType
  FillPersonalInformation
  ChooseIndustryType
  ChooseInteresedThings
  SelectUsersToFollow
  SelectInterestedCommunities
  SubscribeLatestChannels
  ChooseAvatar
  CreateProfile
  AcceptTermsOfService
  OnboardingCompleted
  FeaturePopupScreen
  WelcomeScreenAfterOnboarding
  UpdateDetailsAfterOnBoardingCompletion
}

enum AccountType {
  Individual
  Business
}

enum Gender {
  MALE
  FEMALE
  OTHERS
}

enum ReasonHereFor {
  SELLING_DIGITAL_ARTS
  MAKING_SOCIAL_CIRCLE
  INVESTING_IN_MARKETPLACE
  PREFER_NOT_TO_SAY
}

enum RelationshipStatus {
  SINGLE
  MARRIED
  WIDOWED
  DIVORCED
  DOMESTIC
  PREFER_NOT_TO_SAY
}

enum SignUpType {
  GOOGLE
  LOCAL
}

enum AvatarCardType {
  SILVER
  GOLD
  DIAMOND
}

type CommentModel {
  _id: ID!
  text: String
  likeCount: Float
  dislikeCount: Float
  shareCount: Float
  commentCounts: Float
  viewsCount: Float
  sendCount: Float
  user: User
  userData: User
  post: ID!
  parentComment: ID
  mediaMetadData: ResourcesMetaDataMOdel
  repliesCount: Float
  createdAt: String!
  isLiked: Boolean
}

type CommentDocument {
  comments: [CommentModel!]
  hasMoreComments: Boolean
  endCursor: String
  startCursor: String
  startId: String!
  endId: String!
}

type PollProps {
  optionA: String
  optionB: String
  optionC: String
  optionD: String
  optionACount: Int
  optionBCount: Int
  optionCCount: Int
  optionDCount: Int
  optionAPercent: Int
  optionBPercent: Int
  optionCPercent: Int
  optionDPercent: Int
  duration: String!
  isExpired: Boolean!
  totalVoteCount: Float!
}

type PostResource {
  _id: ID
  fieldname: String
  originalname: String
  encoding: String
  mimetype: String
  bucket: String
  key: String
  size: Float
  acl: String
  contentType: String
  contentDisposition: String
  contentEncoding: String
  storageClass: String
  serverSideEncryption: String
  metadata: String
  location: String
}

type Post {
  _id: ID!
  title: String
  caption: String
  likeCount: Float
  dislikeCount: Float
  shareCount: Float
  commentCounts: Float
  viewsCount: Float
  sendCount: Float
  user: User
  mediaResources: [PostResource!]
  pollProps: PollProps
  type: String!
  optionA: String
  optionB: String
  optionC: String
  optionD: String
  optionACount: Int
  optionBCount: Int
  optionCCount: Int
  optionDCount: Int
  optionAPercent: Int
  optionBPercent: Int
  optionCPercent: Int
  optionDPercent: Int
  duration: String
  isExpired: Boolean
  createdAt: String!
}

type PostsDocument {
  posts: [Post!]
  hasMorePosts: Boolean
  endCursor: String
  startCursor: String
  startId: String!
  endId: String!
}

type PostRections {
  _id: String
  post: String!
  user: String
}

type Query {
  getPostbyID(id: String!): Post!
  getUserTimeLine(nextCursor: String, limit: Float!): PostsDocument!
  getUserNewsFeed(nextCursor: String, limit: Float!): PostsDocument!
  checkValidator(p: TestingDto!): String!
  getPostReaction(nextCursor: String, postId: String!, limit: Float!, type: String!): PostRections!
  getCommentsByid(postId: String!, nextCursor: String, limit: Float): CommentDocument!
  getRepliesForComment(postId: String!, nextCursor: String, limit: Float, commentId: String!): CommentDocument!
}

input TestingDto {
  countryCode: String!
  phoneNumber: String!
  testing: TestingDto2!
}

input TestingDto2 {
  name: String!
}

type Mutation {
  createPost(post: CreatePostInput!): Post!
  addVote(selectedOption: String!, postId: String!): PollProps!
  addReactionOnPost(postId: String!, reactionType: ReactionType!): String!
  removeReactionOnPost(postId: String!): String!
  addLikeOnComment(postId: String!, commnetId: String!): String!
  addComment(postId: String!, comment: CreateCommentInput!): CommentModel!
  deleteCommnet(id: String!, postId: String!): String!
  unlikeComment(postId: String!, commnetId: String!): String!
}

input CreatePostInput {
  title: String
  caption: String
  postingAs: String
  type: PostType!
  resourceId: String
  whoCanSee: PostVisibility
  optionA: String
  optionB: String
  optionC: String
  optionD: String
  duration: PollDuration
  mediaResources: [ResourcesMetaData!]
}

enum PostType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  EVENT
  DOCUMENT
  Poll
  WHITE_ARTICLE
  CELEBRATION
}

enum PostVisibility {
  PUBLIC
  CONNECTION_ONLY
  GROUP_MEMBERS_ONLY
}

enum PollDuration {
  ONE_DAY
  THREE_DAYS
  ONE_WEEK
  TWO_WEEKS
}

input ResourcesMetaData {
  _id: ID
  fieldname: String
  originalname: String
  encoding: String
  mimetype: String
  bucket: String
  key: String
  size: Float
  acl: String
  contentType: String
  contentDisposition: String
  contentEncoding: String
  storageClass: String
  serverSideEncryption: String
  metadata: String
  location: String!
}

enum ReactionType {
  HEART
  LIKE
  DISLIKE
  CARE
  CLAP
  IDEA
  AMAZE
}

input CreateCommentInput {
  text: String!
  resourcesMetadData: ResourcesMetaData
  parentId: ID
  subParentID: ID
  mentionedUsers: [String!]
}

type Subscription {
  comment(postId: String!): CommentModel!
}